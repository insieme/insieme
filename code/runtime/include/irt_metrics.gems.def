/**
 * Copyright (c) 2002-2017 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 */

GROUP(rapmi_group, int eg_dummy, rapmi_t rapmi_data, { rapmi_ctrl(LEM_SENS_MODE_ACC, 0, 0); }, {}, {}, {}, {}, {},
      {
	      rapmi_start();
	      rapmi_read(&rapmi_data);
	  },
      {
	      rapmi_stop();
	      rapmi_read(&rapmi_data);
	  })

/*TODO [_GEMS]: check the sampling rate*/
#if !defined(ISOLATE_METRIC) || defined(ISOLATE_RAPMI_AVERAGE_POWER)
METRIC(rapmi_average_power, 50, mW, uint32, "%u", IRT_HW_SCOPE_CORE, IRT_METRIC_AGGREGATOR_AVG, rapmi_group, {}, {
	wi->inst_region_data->aggregated_rapmi_average_power =
	    (wi->inst_region_data->aggregated_rapmi_average_power + ((rapmi_data.cpu_power * 100) / (rapmi_data.ts - wi->inst_region_data->last_rapmi_ticks)) / 2);
}, {}, {}, 1)
#endif

/*TODO [_GEMS]: check the sampling rate*/
#if !defined(ISOLATE_METRIC) || defined(ISOLATE_RAPMI_ENERGY)
METRIC(rapmi_energy, 51, j, uint32, "%u", IRT_HW_SCOPE_CORE, IRT_METRIC_AGGREGATOR_SUM, rapmi_group, {},
       { wi->inst_region_data->aggregated_rapmi_energy += rapmi_data.cpu_power; }, {}, {}, 1)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_RAPMI_TICKS)
METRIC(rapmi_ticks, 52, us, uint32, "%u", IRT_HW_SCOPE_CORE, IRT_METRIC_AGGREGATOR_SUM, rapmi_group, {
	wi->inst_region_data->last_rapmi_ticks = rapmi_data.ts;
}, { wi->inst_region_data->aggregated_rapmi_ticks += rapmi_data.ts - wi->inst_region_data->last_rapmi_ticks; }, {}, {}, 1)
#endif

#undef ISOLATE_RAPMI_AVERAGE_POWER
#undef ISOLATE_RAPMI_ENERGY
#undef ISOLATE_RAPMI_TICKS
