/**
 * Copyright (c) 2002-2015 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details
 * regarding third party software licenses.
 */

/**
 * This macro file defines the events supported by the event instrumentation
 * system.
 *
 * The macro
 * 			IRT_INST_EVENT(A, B, C)
 * is defining a macro with
 * 		A ... the enum for the event
 * 		B ... the group label for the event ("WI" for work item, "WO" for worker, ...)
 * 		C ... the event label for the event
 *
 * IMPORTANT: the tuple (B, C) must be unique
 */

// WORK GROUP EVENTS
IRT_INST_EVENT(IRT_INST_WORK_GROUP_CREATED, "WG", "CREATED")
IRT_INST_EVENT(IRT_INST_WORK_GROUP_BARRIER_COMPLETE, "WG", "BARRIER_COMPLETE")
IRT_INST_EVENT(IRT_INST_WORK_GROUP_FINALIZED, "WG", "FINALIZED")

// WORK ITEM EVENTS
IRT_INST_EVENT(IRT_INST_WORK_ITEM_CREATED, "WI", "CREATED")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_QUEUED, "WI", "QUEUED")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_POOLED, "WI", "POOLED")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_SPLITTED, "WI", "SPLITTED")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_STARTED, "WI", "STARTED")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_YIELD, "WI", "YIELD")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_SUSPENDED_IO, "WI", "SUSP_IO")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_SUSPENDED_BARRIER, "WI", "SUSP_BARRIER")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_SUSPENDED_JOIN, "WI", "SUSP_JOIN")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_SUSPENDED_GROUPJOIN, "WI", "SUSP_GROUPJOIN")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_SUSPENDED_JOIN_ALL, "WI", "SUSP_JOINALL")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_SUSPENDED_LOCK, "WI", "SUSP_LOCK")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_SUSPENDED_UNKNOWN, "WI", "SUSP_UNKNOWN")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_RESUMED_IO, "WI", "RESUMED_IO")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_RESUMED_BARRIER, "WI", "RESUMED_BARRIER")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_RESUMED_JOIN, "WI", "RESUMEDSUSP_JOIN")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_RESUMED_GROUPJOIN, "WI", "RESUMED_GROUPJOIN")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_RESUMED_JOIN_ALL, "WI", "RESUMED_JOINALL")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_RESUMED_LOCK, "WI", "RESUMED_LOCK")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_RESUMED_UNKNOWN, "WI", "RESUMED_UNKNOWN")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_END_START, "WI", "END_START")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_END_FINISHED, "WI", "END_FINISHED")
IRT_INST_EVENT(IRT_INST_WORK_ITEM_FINALIZED, "WI", "FINALIZED")

// WORKER EVENTS
IRT_INST_EVENT(IRT_INST_WORKER_CREATED, "WO", "CREATED")
IRT_INST_EVENT(IRT_INST_WORKER_RUNNING, "WO", "RUNNING")
IRT_INST_EVENT(IRT_INST_WORKER_SLEEP_START, "WO", "SLEEP_START")
IRT_INST_EVENT(IRT_INST_WORKER_SLEEP_END, "WO", "SLEEP_END")
IRT_INST_EVENT(IRT_INST_WORKER_SLEEP_BUSY_START, "WO", "SLEEP_BUSY_START")
IRT_INST_EVENT(IRT_INST_WORKER_SLEEP_BUSY_END, "WO", "SLEEP_BUSY_END")
IRT_INST_EVENT(IRT_INST_WORKER_SCHEDULING_LOOP, "WO", "SCHEDULING_LOOP")
IRT_INST_EVENT(IRT_INST_WORKER_SCHEDULING_LOOP_END, "WO", "SCHEDULING_LOOP_END")
IRT_INST_EVENT(IRT_INST_WORKER_STEAL_TRY, "WO", "STEAL_TRY")
IRT_INST_EVENT(IRT_INST_WORKER_STEAL_SUCCESS, "WO", "STEAL_SUCCESS")
IRT_INST_EVENT(IRT_INST_WORKER_IMMEDIATE_EXEC, "WO", "IMMEDIATE_EXEC")
IRT_INST_EVENT(IRT_INST_WORKER_STOP, "WO", "STOP")

// DATA ITEM EVENTS
IRT_INST_EVENT(IRT_INST_DATA_ITEM_CREATED, "DI", "CREATED")
IRT_INST_EVENT(IRT_INST_DATA_ITEM_RECYCLED, "DI", "RECYCLED")

// REGION EVENTS
IRT_INST_EVENT(IRT_INST_REGION_START, "RG", "START")
IRT_INST_EVENT(IRT_INST_REGION_END, "RG", "END")

// DEBUG EVENTS
IRT_INST_EVENT(IRT_INST_DBG_EV1, "DB", "DBG_EV_1")
IRT_INST_EVENT(IRT_INST_DBG_EV2, "DB", "DBG_EV_2")
IRT_INST_EVENT(IRT_INST_DBG_EV3, "DB", "DBG_EV_3")
IRT_INST_EVENT(IRT_INST_DBG_TASK_SELECTION, "DB", "TASK_SELECTION")
