/**
 * Copyright (c) 2002-2017 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 */
/**
 * This macro file defines the metrics supported by the performance
 * instrumentation system.
 *
 * There are METRICs and GROUPs, and each METRIC must be a member of a group
 * (groups can hold multiple METRICs).
 *
 * Important non-selfexplanatory parameters:
 *
 * SCOPE: denotes the topological scope (see instrumentation.h)
 * AGGREGATION_METHOD: sum, average, ... (see instrumentation.h)
 * WI_START_CODE/WI_END_CODE: measurement code to start/end a measurement every
 *   time a WI is started / suspended / resumed / ended. Measured per
 *   individual WI. For each measurement, first the start/end code of the GROUPS
 *   is called, followed by the start/end code of the individual METRICS.
 * REGION_EARLY_START_CODE/REGION_LATE_END_CODE: measurement code to start/end a
 *   measurement at the first entry and last exit of a region. This is done once
 *   per invidivual region. For each measurement, first the start/end code of
 *   the GROUPS is called, followed by the start/end code of the individual
 *   METRICS.
 * OUTPUT_CONVERSION_CODE: conversion factor applied during output (e.g. time is
 *   measured in clock cycles but printed in nanoseconds).
 *
 * Inside the WI_START_CODE/WI_END_CODE and
 * REGION_EARLY_START_CODE/REGION_LATE_END_CODE environments, the developer has
 * access to inst_region_struct* rg and irt_work_item* wi respectively, to
 * access and modify data. For every metric, fields "last_<metric_name>" and
 * "aggregated_<metric_name>" will be generated, and can be used for
 * measurements (c.f. the cpu_time METRIC).
 */

#include "instrumentation_regions.h"
#include "instrumentation_regions_includes.h"


#ifndef METRIC
#define METRIC(NAME, ID, UNIT, DATA_TYPE, FORMAT_STRING, SCOPE, AGGREGATION_METHOD, GROUP, WI_START_CODE, WI_END_CODE, REGION_EARLY_START_CODE,                \
               REGION_LATE_END_CODE, OUTPUT_CONVERSION_CODE)
#endif

#ifndef GROUP
#define GROUP(NAME, GLOBAL_VAR_DECLARATIONS, LOCAL_VAR_DECLARATIONS, INIT_CODE_GLOBAL, INIT_CODE_WORKER, FINALIZE_CODE_GLOBAL, FINALIZE_CODE_WORKER,           \
              WI_START_CODE, WI_END_CODE, REGION_EARLY_START_CODE, REGION_LATE_END_CODE)
#endif


GROUP(cpu_time_group, int ctg_dummy, , {}, {}, {}, {}, {}, {}, {}, {})

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_CPU_TIME)
METRIC(cpu_time, 0, ns, uint64, "%" PRIu64, IRT_HW_SCOPE_CORE, IRT_METRIC_AGGREGATOR_SUM, cpu_time_group, {
	wi->inst_region_data->last_cpu_time = irt_time_ticks();
}, { wi->inst_region_data->aggregated_cpu_time += irt_time_ticks() - wi->inst_region_data->last_cpu_time; }, {}, {}, ((double)1e9 / irt_g_time_ticks_per_sec))
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_WALL_TIME)
METRIC(wall_time, 1, ns, uint64, "%" PRIu64, IRT_HW_SCOPE_SYSTEM, IRT_METRIC_AGGREGATOR_SUM, cpu_time_group, {}, {}, { rg->last_wall_time = irt_time_ticks(); },
       { rg->aggregated_wall_time += irt_time_ticks() - rg->last_wall_time; }, ((double)1e9 / irt_g_time_ticks_per_sec))
#endif

#ifdef _GEMS_SIM
#include "irt_metrics.gems.def"
#elif defined _GEMS && defined __arm__
#include "irt_metrics.gems_odroid.def"
#else
#include "irt_metrics.rapl.def"
#endif

GROUP(socket_occupancy_group, int sog_dummy, , {}, {}, {}, {}, {}, {}, {}, {})

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_SOCKET_OCCUPANCY)
METRIC(socket_occupancy, 200, unit, double, "%f", IRT_HW_SCOPE_SOCKET, IRT_METRIC_AGGREGATOR_AVG, socket_occupancy_group,
       { wi->inst_region_data->last_socket_occupancy = 42; }, { wi->inst_region_data->aggregated_socket_occupancy = 42; }, {}, {}, 1)
#endif

#ifdef IRT_USE_PAPI

GROUP(papi_group, int32* papi_eventset, long long int papi_values[IRT_INST_PAPI_MAX_COUNTERS] = {0},
	{
		irt_papi_init();
		irt_papi_setup_context(context);
	},
	{ irt_papi_setup_worker(worker); }, { irt_papi_finalize_context(context); }, { irt_papi_finalize_worker(worker); }, { irt_papi_start(); },
	{ irt_papi_stop(papi_values); }, {}, {})

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_PAPI_L1_TCM)
METRIC(PAPI_L1_TCM, 300, unit, uint64, "%" PRIu64, IRT_HW_SCOPE_SOCKET, IRT_METRIC_AGGREGATOR_SUM, papi_group, { wi->inst_region_data->last_PAPI_L1_TCM = 0; },
	{ wi->inst_region_data->aggregated_PAPI_L1_TCM = irt_papi_get_value_by_name(context, papi_values, "PAPI_L1_TCM"); }, {}, {}, 1)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_PAPI_L1_DCM)
METRIC(PAPI_L1_DCM, 301, unit, uint64, "%" PRIu64, IRT_HW_SCOPE_SOCKET, IRT_METRIC_AGGREGATOR_SUM, papi_group, { wi->inst_region_data->last_PAPI_L1_DCM = 0; },
	{ wi->inst_region_data->aggregated_PAPI_L1_DCM = irt_papi_get_value_by_name(context, papi_values, "PAPI_L1_DCM"); }, {}, {}, 1)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_PAPI_L1_ICM)
METRIC(PAPI_L1_ICM, 302, unit, uint64, "%" PRIu64, IRT_HW_SCOPE_SOCKET, IRT_METRIC_AGGREGATOR_SUM, papi_group, { wi->inst_region_data->last_PAPI_L1_ICM = 0; },
	{ wi->inst_region_data->aggregated_PAPI_L1_ICM = irt_papi_get_value_by_name(context, papi_values, "PAPI_L1_ICM"); }, {}, {}, 1)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_PAPI_L2_TCM)
METRIC(PAPI_L2_TCM, 310, unit, uint64, "%" PRIu64, IRT_HW_SCOPE_SOCKET, IRT_METRIC_AGGREGATOR_SUM, papi_group, { wi->inst_region_data->last_PAPI_L2_TCM = 0; },
	{ wi->inst_region_data->aggregated_PAPI_L2_TCM = irt_papi_get_value_by_name(context, papi_values, "PAPI_L2_TCM"); }, {}, {}, 1)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_PAPI_L2_ICM)
METRIC(PAPI_L2_ICM, 312, unit, uint64, "%" PRIu64, IRT_HW_SCOPE_SOCKET, IRT_METRIC_AGGREGATOR_SUM, papi_group, { wi->inst_region_data->last_PAPI_L2_ICM = 0; },
	{ wi->inst_region_data->aggregated_PAPI_L2_ICM = irt_papi_get_value_by_name(context, papi_values, "PAPI_L2_ICM"); }, {}, {}, 1)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_PAPI_L3_TCM)
METRIC(PAPI_L3_TCM, 320, unit, uint64, "%" PRIu64, IRT_HW_SCOPE_SOCKET, IRT_METRIC_AGGREGATOR_SUM, papi_group, { wi->inst_region_data->last_PAPI_L3_TCM = 0; },
	{ wi->inst_region_data->aggregated_PAPI_L3_TCM = irt_papi_get_value_by_name(context, papi_values, "PAPI_L3_TCM"); }, {}, {}, 1)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_PAPI_FP_OPS)
METRIC(PAPI_FP_OPS, 330, unit, uint64, "%" PRIu64, IRT_HW_SCOPE_SOCKET, IRT_METRIC_AGGREGATOR_SUM, papi_group, { wi->inst_region_data->last_PAPI_FP_OPS = 0; },
	{ wi->inst_region_data->aggregated_PAPI_FP_OPS = irt_papi_get_value_by_name(context, papi_values, "PAPI_FP_OPS"); }, {}, {}, 1)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_PAPI_TOT_INS)
METRIC(PAPI_TOT_INS, 330, unit, uint64, "%" PRIu64, IRT_HW_SCOPE_SOCKET, IRT_METRIC_AGGREGATOR_SUM, papi_group, {
	wi->inst_region_data->last_PAPI_TOT_INS = 0;
}, { wi->inst_region_data->aggregated_PAPI_TOT_INS = irt_papi_get_value_by_name(context, papi_values, "PAPI_TOT_INS"); }, {}, {}, 1)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_PAPI_TOT_CYC)
METRIC(PAPI_TOT_CYC, 330, unit, uint64, "%" PRIu64, IRT_HW_SCOPE_SOCKET, IRT_METRIC_AGGREGATOR_SUM, papi_group, {
	wi->inst_region_data->last_PAPI_TOT_CYC = 0;
}, { wi->inst_region_data->aggregated_PAPI_TOT_CYC = irt_papi_get_value_by_name(context, papi_values, "PAPI_TOT_CYC"); }, {}, {}, 1)
#endif

#endif // #ifdef IRT_USE_PAPI

#undef ISOLATE_METRIC
#undef ISOLATE_CPU_TIME
#undef ISOLATE_WALL_TIME
#undef ISOLATE_SOCKET_OCCUPANCY
#undef ISOLATE_PAPI_L1_TCM
#undef ISOLATE_PAPI_L1_DCM
#undef ISOLATE_PAPI_L2_TCM
#undef ISOLATE_PAPI_L3_TCM
#undef ISOLATE_PAPI_FP_OPS

#undef METRIC
#undef GROUP
