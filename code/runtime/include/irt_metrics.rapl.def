/**
 * Copyright (c) 2002-2016 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details
 * regarding third party software licenses.
 */

GROUP(energy_group, int eg_dummy, rapl_energy_data rapl_data, { irt_energy_select_instrumentation_method(); }, {}, { irt_rapl_finalize(); }, {}, {}, {},
      { irt_get_energy_consumption(&(rapl_data)); }, { irt_get_energy_consumption(&(rapl_data)); })

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_CPU_ENERGY)
METRIC(cpu_energy, 100, kg*m^2*s^-2, double, "%f", IRT_HW_SCOPE_SOCKET, IRT_METRIC_AGGREGATOR_SUM, energy_group, {}, {},
       { rg->last_cpu_energy = rapl_data.package; }, { rg->aggregated_cpu_energy += rapl_data.package - rg->last_cpu_energy; }, 1)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_CORES_ENERGY)
METRIC(cores_energy, 101, kg*m^2*s^-2, double, "%f", IRT_HW_SCOPE_SOCKET, IRT_METRIC_AGGREGATOR_SUM, energy_group, {}, {},
       { rg->last_cores_energy = rapl_data.cores; }, { rg->aggregated_cores_energy += rapl_data.cores - rg->last_cores_energy; }, 1)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_MEMORY_CONTROLLER_ENERGY)
METRIC(memory_controller_energy, 102, kg*m^2*s^-2, double, "%f", IRT_HW_SCOPE_SOCKET, IRT_METRIC_AGGREGATOR_SUM, energy_group, {}, {}, {
	rg->last_memory_controller_energy = rapl_data.mc;
}, { rg->aggregated_memory_controller_energy += rapl_data.mc - rg->last_memory_controller_energy; }, 1)
#endif

#undef ISOLATE_CPU_ENERGY
#undef ISOLATE_CORES_ENERGY
#undef ISOLATE_MEMORY_CONTROLLER_ENERGY
