/**
 * Copyright (c) 2002-2017 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 */

GROUP(energy_group, int eg_dummy, rapl_energy_data rapl_data, { irt_energy_select_instrumentation_method(); }, {}, { irt_rapl_finalize(); }, {}, {}, {},
      { irt_get_energy_consumption(&(rapl_data)); }, { irt_get_energy_consumption(&(rapl_data)); })

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_CPU_ENERGY)
METRIC(cpu_energy, 100, kg*m^2*s^-2, double, "%f", IRT_HW_SCOPE_SOCKET, IRT_METRIC_AGGREGATOR_SUM, energy_group, {}, {},
       { rg->last_cpu_energy = rapl_data.package; }, { rg->aggregated_cpu_energy += rapl_data.package - rg->last_cpu_energy; }, 1)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_CORES_ENERGY)
METRIC(cores_energy, 101, kg*m^2*s^-2, double, "%f", IRT_HW_SCOPE_SOCKET, IRT_METRIC_AGGREGATOR_SUM, energy_group, {}, {},
       { rg->last_cores_energy = rapl_data.cores; }, { rg->aggregated_cores_energy += rapl_data.cores - rg->last_cores_energy; }, 1)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_MEMORY_CONTROLLER_ENERGY)
METRIC(memory_controller_energy, 102, kg*m^2*s^-2, double, "%f", IRT_HW_SCOPE_SOCKET, IRT_METRIC_AGGREGATOR_SUM, energy_group, {}, {}, {
	rg->last_memory_controller_energy = rapl_data.mc;
}, { rg->aggregated_memory_controller_energy += rapl_data.mc - rg->last_memory_controller_energy; }, 1)
#endif

#undef ISOLATE_CPU_ENERGY
#undef ISOLATE_CORES_ENERGY
#undef ISOLATE_MEMORY_CONTROLLER_ENERGY
