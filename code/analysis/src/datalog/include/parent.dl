#pragma once

#include "ir.dl"


// ----- A relation defining the parent/child relation in the IR -------

.decl ParentOf( parent : node, child : node ) output


/* List node */
ParentOf(ID,X) :- NodeList(ID,_,X).

/* Type nodes */
ParentOf(ID,X) :- GenericType(ID,_,X,_).
ParentOf(ID,X) :- GenericType(ID,_,_,X).

ParentOf(ID,X) :- FunctionType(ID,X,_,_,_).
ParentOf(ID,X) :- FunctionType(ID,_,X,_,_).
ParentOf(ID,X) :- FunctionType(ID,_,_,_,X).

ParentOf(ID,X) :- GenericTypeVariable(ID,_,X).

ParentOf(ID,X) :- VariadicGenericTypeVariable(ID,_,X).

ParentOf(ID,X) :- NumericType(ID,X).

ParentOf(ID,X) :- TagType(ID,X,_).
ParentOf(ID,X) :- TagType(ID,_,X).

ParentOf(ID,X) :- Struct(ID,_,X,_,_,_,_,_,_).
ParentOf(ID,X) :- Struct(ID,_,_,X,_,_,_,_,_).
ParentOf(ID,X) :- Struct(ID,_,_,_,X,_,_,_,_).
ParentOf(ID,X) :- Struct(ID,_,_,_,_,_,X,_,_).
ParentOf(ID,X) :- Struct(ID,_,_,_,_,_,_,X,_).
ParentOf(ID,X) :- Struct(ID,_,_,_,_,_,_,_,X).

ParentOf(ID,X) :- Union(ID,_,X,_,_,_,_,_).
ParentOf(ID,X) :- Union(ID,_,_,X,_,_,_,_).
ParentOf(ID,X) :- Union(ID,_,_,_,X,_,_,_).
ParentOf(ID,X) :- Union(ID,_,_,_,_,_,X,_).
ParentOf(ID,X) :- Union(ID,_,_,_,_,_,_,X).

/* Expression nodes */
ParentOf(ID,X) :- Literal(ID,X,_).

ParentOf(ID,X) :- Variable(ID,X,_).

ParentOf(ID,X) :- CallExpr(ID,X).

ParentOf(ID,X) :- BindExpr(ID,X,_).
ParentOf(ID,X) :- BindExpr(ID,_,X).

ParentOf(ID,X) :- CastExpr(ID,X).

ParentOf(ID,X) :- InitExpr(ID,X,_).
ParentOf(ID,X) :- InitExpr(ID,_,X).

ParentOf(ID,X) :- JobExpr(ID,X,_).
ParentOf(ID,X) :- JobExpr(ID,_,X).

ParentOf(ID,X) :- TupleExpr(ID,X).

ParentOf(ID,X) :- Lambda(ID,X,_,_).
ParentOf(ID,X) :- Lambda(ID,_,X,_).
ParentOf(ID,X) :- Lambda(ID,_,_,X).

/* Statement nodes */
ParentOf(ID,X) :- DeclarationStmt(ID,X,_).
ParentOf(ID,X) :- DeclarationStmt(ID,_,X).

ParentOf(ID,X) :- IfStmt(ID,X,_,_).
ParentOf(ID,X) :- IfStmt(ID,_,X,_).
ParentOf(ID,X) :- IfStmt(ID,_,_,X).

ParentOf(ID,X) :- ForStmt(ID,X,_,_,_).
ParentOf(ID,X) :- ForStmt(ID,_,X,_,_).
ParentOf(ID,X) :- ForStmt(ID,_,_,X,_).
ParentOf(ID,X) :- ForStmt(ID,_,_,_,X).

ParentOf(ID,X) :- ReturnStmt(ID,X,_).
ParentOf(ID,X) :- ReturnStmt(ID,_,X).

ParentOf(ID,X) :- SwitchStmt(ID,X,_,_).
ParentOf(ID,X) :- SwitchStmt(ID,_,X,_).
ParentOf(ID,X) :- SwitchStmt(ID,_,_,X).

ParentOf(ID,X) :- ThrowStmt(ID,X).

ParentOf(ID,X) :- TryCatchStmt(ID,X).

ParentOf(ID,X) :- WhileStmt(ID,X,_).
ParentOf(ID,X) :- WhileStmt(ID,_,X).

/* Support nodes */
ParentOf(ID,X) :- CatchClause(ID,X,_).
ParentOf(ID,X) :- CatchClause(ID,_,X).

ParentOf(ID,X) :- Field(ID,_,X).

ParentOf(ID,X) :- MemberFunction(ID,_,_,X).

ParentOf(ID,X) :- Parent(ID,_,_,X).

ParentOf(ID,X) :- PureVirtualMemberFunction(ID,_,X).

ParentOf(ID,X) :- SwitchCase(ID,X,_).
ParentOf(ID,X) :- SwitchCase(ID,_,X).

ParentOf(ID,X) :- TagTypeBinding(ID,X,_).
ParentOf(ID,X) :- TagTypeBinding(ID,_,X).
