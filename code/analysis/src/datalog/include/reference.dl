#pragma once

#include "forward_decl.dl"
#include "data_flow_analysis.dl"
#include "callable.dl"

.using callGraph from callable
.using reference_value from forward_decl as ref_val
.using DataFlowAnalysis from DataFlowAnalysis

// ---------- Analysis Specification -----------

.init reference = DataFlowAnalysis <memory_location>

// link to result set
ref_val(n,p,v) :- reference.value(n,p,v).

// the value to be exhibited by any unknown value
reference.unknown_value ( X ) :- reference.value(_,_,X).
reference.unknown_value ( -1 ).			// two values not covered anywhere (=outside the application)
reference.unknown_value ( -2 ).


// references are created by calls to ref_alloc
reference.value( c, DP_ROOT, [ c , DP_ROOT ] ) :- callGraph(c,t),NodeIdentity(t,x),NamedConstruct("ref_alloc",x).

// and by function parameters
// TODO: cover this (after merge, this is different)
reference.value( a, DP_ROOT, [ a , DP_ROOT] ) :- Lambda(_,_,p,_), NodeList(p,_,a).

// and by return statements
// TODO: cover this (after merge, this is different)
