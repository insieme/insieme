#pragma once

#include "forward_decl.dl"


// some additional results
.decl callGraph ( n : call_expr , c : callable )


// ---------- Analysis Specification -----------

// the value to be exhibited by any unknown value
.decl unknown_callable_value ( c : callable )
unknown_callable_value ( X ) :- callable_value(_,X).


// lambda expressions point to callable lambdas
callable_value( le, l ) :- LambdaExpr( le,_,refA,def ), ParentOf(def,binding), LambdaBinding(binding,refB,l), EqualNodes(refA,refB).

// binds are all callable
callable_value( bind, bind ) :- BindExpr(bind,_,_).

// literals with a function type are callable
callable_value( lit, lit ) :- Literal(lit,type,_), FunctionType(type,_,_,_,_).

// TODO: add support for recursive calls

// TODO: add support for data flow


// --------------------------------------------

// create the call graph
callGraph ( call, trg ) :- CallExpr(call,f), callable_value(f,trg).
