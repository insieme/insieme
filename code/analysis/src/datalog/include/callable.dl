.using DataFlowAnalysis from Templates/DataFlowAnalysis
.using ParentOf from Utils/Parent
.using EqualNodes from Utils/Equality


// the analysis assigning IR nodes a callable value
.type callable = lambda | call_expr
.decl callable_value( n : node , p : data_path , v : callable )

		
// some additional results
.decl callGraph ( n : call_expr , c : callable )


// ---------- Analysis Specification -----------


.init callable = DataFlowAnalysis<callable>

// link to result set
callable_value(n,p,v) :- callable.value(n,p,v).

// the value to be exhibited by any unknown value
callable.unknown_value ( X ) :- callable.value(_,_,X).


// lambda expressions point to callable lambdas
callable.value( le, DP_ROOT, l ) :- LambdaExpr( le,_,refA,def ), ParentOf(def,binding), LambdaBinding(binding,refB,l), EqualNodes(refA,refB).

// binds are all callable
callable.value( bind, DP_ROOT, bind ) :- BindExpr(bind,_,_).

// literals with a function type are callable
callable.value( lit, DP_ROOT, lit ) :- Literal(lit,type,_), FunctionType(type,_,_,_,_).

// TODO: add support for recursive calls


// --------------------------------------------

// create the call graph
callGraph ( call, trg ) :- CallExpr(call,f), callable_value(f,DP_ROOT,trg).
