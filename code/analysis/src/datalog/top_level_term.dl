#include "ir.dl"



// Type definitions

.decl Node     ( id : node )
.decl UsedNode ( id : node )
.decl TopLevel ( id : node ) output



// Add all the node types to the Node relation

      /* List node */
Node(X) :- NodeList(X,_,_).

      /* Type nodes */
Node(X) :- GenericType                (X,_,_,_).
Node(X) :- TupleType                  (X).
Node(X) :- FunctionType               (X,_,_,_,_).
Node(X) :- TypeVariable               (X,_).
Node(X) :- VariadicTypeVariable       (X,_).
Node(X) :- GenericTypeVariable        (X,_,_).
Node(X) :- VariadicGenericTypeVariable(X,_,_).

Node(X) :- NumericType     (X,_).
Node(X) :- TagType         (X,_,_).
Node(X) :- TagTypeReference(X,_).

Node(X) :- Struct(X,_,_,_,_,_,_,_,_).

      /* Expression nodes */
Node(X) :- Literal(X,_,_).
Node(X) :- Variable(X,_,_).
Node(X) :- CallExpr(X,_).
Node(X) :- BindExpr(X,_,_).
Node(X) :- InitExpr(X,_,_).
Node(X) :- LambdaExpr(X,_,_,_).
Node(X) :- LambdaReference(X,_,_).

      /* Statement nodes */
Node(X) :- CompoundStmt(X).
Node(X) :- DeclarationStmt(X,_,_).
Node(X) :- IfStmt(X,_,_,_).
Node(X) :- BreakStmt(X).
Node(X) :- ContinueStmt(X).
Node(X) :- ForStmt(X,_,_,_,_).
Node(X) :- ReturnStmt(X,_,_).
Node(X) :- WhileStmt(X,_,_).

      /* Support nodes */
Node(X) :- Types(X).
Node(X) :- Parents(X).
Node(X) :- Expressions(X).
Node(X) :- Field(X,_,_).
Node(X) :- Fields(X).
Node(X) :- Lambda(X,_,_,_).
Node(X) :- LambdaBinding(X,_,_).
Node(X) :- LambdaDefinition(X).
Node(X) :- MemberFunction(X,_,_,_).
Node(X) :- MemberFunctions(X).
Node(X) :- Parameters(X).
Node(X) :- Parent(X,_,_,_).
Node(X) :- PureVirtualMemberFunction(X,_,_).
Node(X) :- PureVirtualMemberFunctions(X).



// A UsedNode is a node that has been referenced

UsedNode(X) :- NodeList(_,_,X).

UsedNode(X) :- GenericType(_,_,_,X).
UsedNode(X) :- GenericType(_,_,X,_).

UsedNode(X) :- FunctionType(_,X,_,_,_).
UsedNode(X) :- FunctionType(_,_,X,_,_).
UsedNode(X) :- FunctionType(_,_,_,_,X).

UsedNode(X) :- GenericTypeVariable(_,_,X).

UsedNode(X) :- VariadicGenericTypeVariable(_,_,X).

UsedNode(X) :- NumericType(_,X).

UsedNode(X) :- TagType(_,X,_).
UsedNode(X) :- TagType(_,_,X).

UsedNode(X) :- Struct(_,_,X,_,_,_,_,_,_).
UsedNode(X) :- Struct(_,_,_,X,_,_,_,_,_).
UsedNode(X) :- Struct(_,_,_,_,X,_,_,_,_).
UsedNode(X) :- Struct(_,_,_,_,_,_,X,_,_).
UsedNode(X) :- Struct(_,_,_,_,_,_,_,X,_).
UsedNode(X) :- Struct(_,_,_,_,_,_,_,_,X).

UsedNode(X) :- Literal(_,X,_).

UsedNode(X) :- Variable(_,X,_).

UsedNode(X) :- CallExpr(_,X).

UsedNode(X) :- BindExpr(_,X,_).
UsedNode(X) :- BindExpr(_,_,X).

UsedNode(X) :- InitExpr(_,X,_).
UsedNode(X) :- InitExpr(_,_,X).

UsedNode(X) :- LambdaExpr(_,X,_,_).
UsedNode(X) :- LambdaExpr(_,_,X,_).
UsedNode(X) :- LambdaExpr(_,_,_,X).

UsedNode(X) :- LambdaReference(_,X,_).

UsedNode(X) :- DeclarationStmt(_,X,_).
UsedNode(X) :- DeclarationStmt(_,_,X).

UsedNode(X) :- IfStmt(_,X,_,_).
UsedNode(X) :- IfStmt(_,_,X,_).
UsedNode(X) :- IfStmt(_,_,_,X).

UsedNode(X) :- ForStmt(_,X,_,_,_).
UsedNode(X) :- ForStmt(_,_,X,_,_).
UsedNode(X) :- ForStmt(_,_,_,X,_).
UsedNode(X) :- ForStmt(_,_,_,_,X).

UsedNode(X) :- ReturnStmt(_,X,_).
UsedNode(X) :- ReturnStmt(_,_,X).

UsedNode(X) :- WhileStmt(_,X,_).
UsedNode(X) :- WhileStmt(_,_,X).

UsedNode(X) :- Field(_,_,X).

UsedNode(X) :- Lambda(_,X,_,_).
UsedNode(X) :- Lambda(_,_,X,_).
UsedNode(X) :- Lambda(_,_,_,X).

UsedNode(X) :- LambdaBinding(_,X,_).
UsedNode(X) :- LambdaBinding(_,_,X).

UsedNode(X) :- MemberFunction(_,_,_,X).

UsedNode(X) :- Parent(_,_,_,X).

UsedNode(X) :- PureVirtualMemberFunction(_,_,X).



// The TopLevel nodes are Nodes that have never been referenced

TopLevel(X) :- Node(X), !UsedNode(X).
