.using _ from Entities/Boolean
.using _ from Entities/PrimitiveTypes


// -- list  & misc node types
.number_type child_index
.number_type function_kind
.number_type unique_node_id


// -- program type --

.number_type program


// -- type types --

.number_type generic_type
.number_type tuple_type
.number_type function_type
.number_type type_variable
.number_type variadic_type_variable
.number_type generic_type_variable
.number_type variadic_generic_type_variable
.number_type numeric_type
.number_type tag_type
.number_type tag_type_ref

.type type = generic_type
           | tuple_type
           | function_type
           | type_variable
           | variadic_type_variable
           | generic_type_variable
           | variadic_generic_type_variable
           | numeric_type
           | tag_type
           | tag_type_ref


// -- record types --

.number_type struct
.number_type union

.type record = struct
             | union


// -- expression types --

.number_type literal
.number_type integer_literal    // VERIFY: I ADDED THIS?
.number_type variable
.number_type call_expr
.number_type bind_expr
.number_type cast_expr
.number_type init_expr
.number_type job_expr
.number_type lambda_expr
.number_type lambda_ref
.number_type tuple_expr

.type expr = literal
           | integer_literal
           | variable
           | call_expr
           | bind_expr
           | cast_expr
           | init_expr
           | job_expr
           | lambda_expr
           | lambda_ref
           | tuple_expr


// -- statement types --

.number_type if_stmt
.number_type compound_stmt
.number_type decl_stmt
.number_type break_stmt       // VERIFY: I ADDED THIS?
.number_type continue_stmt    // VERIFY: I ADDED THIS?
.number_type for_stmt         // VERIFY: I ADDED THIS?
.number_type return_stmt      // VERIFY: I ADDED THIS?
.number_type switch_stmt      // VERIFY: I ADDED THIS?
.number_type throw_stmt       // VERIFY: I ADDED THIS?
.number_type try_catch_stmt   // VERIFY: I ADDED THIS?
.number_type while_stmt       // VERIFY: I ADDED THIS?

.type stmt = expr
           | if_stmt
           | compound_stmt
           | decl_stmt
           | break_stmt
           | continue_stmt
           | for_stmt
           | return_stmt
           | switch_stmt
           | throw_stmt
           | try_catch_stmt
           | while_stmt



// -- support types --

.number_type types
.number_type parents
.number_type tag_type_def
.number_type lambda_def
.number_type lambda
.number_type exprs
.number_type parameters
.number_type switch_cases
.number_type fields
.number_type member_funcs
.number_type pure_virt_member_funcs
.number_type declaration
.number_type catch_clause              // VERIFY: I ADDED THIS?
.number_type field                     // VERIFY: I ADDED THIS?
.number_type lambda_binding            // VERIFY: I ADDED THIS?
.number_type member_func               // VERIFY: I ADDED THIS?
.number_type parent                    // VERIFY: I ADDED THIS?
.number_type pure_virt_member_func     // VERIFY: I ADDED THIS?
.number_type switch_case               // VERIFY: I ADDED THIS?
.number_type tag_type_binding          // VERIFY: I ADDED THIS?


.type support = types
              | exprs
              | parents
              | record
              | tag_type_def
              | lambda_def
              | lambda
              | parameters
              | switch_cases
              | fields
              | member_funcs
              | pure_virt_member_funcs
              | declaration
              | catch_clause
              | field
              | lambda_binding
              | member_func
              | parent
              | pure_virt_member_func
              | switch_case
              | tag_type_binding


// -- node type --

.type node = program
           | type
           | record
           | expr
           | stmt
           | support



// List Node

.decl NodeList ( list:node , idx:child_index , element:node )                                                     input
.decl NodeListLength( list:node, length : number )                                                                input


// Unique Node Identity Relation

.decl NodeIdentity (  id:node , uid:unique_node_id )                                                              input



// Program Node

.decl Program                     ( id:node )                                                                     input



// Type Nodes

.decl FunctionType                ( id:function_type , parameter_types:types, return_type:type
                                  , kind:function_kind , instantiation_types:types )                              input
.decl GenericType                 ( id:generic_type , name:string , parents:parents , params:types )              input
.decl GenericTypeVariable         ( id:generic_type_variable , var_name:string , type_parameter:types )           input
.decl NumericType                 ( id:numeric_type , value:expr )                                                input
.decl TagType                     ( id:tag_type , tag:tag_type_ref, definition:tag_type_def )                     input
.decl TagTypeReference            ( id:tag_type_ref , name:string )                                               input
.decl TupleType                   ( id:tuple_type )                                                               input
.decl TypeVariable                ( id:type_variable , var_name:string )                                          input
.decl VariadicGenericTypeVariable ( id:variadic_generic_type_variable , var_name:string , type_parameter:types )  input
.decl VariadicTypeVariable        ( id:variadic_type_variable , var_name:string )                                 input



// Record-Type Nodes

#define RecordTypeContents name:string , fields:fields , ctors:exprs , dtor_opt:exprs , destructor_virtual:bool \
                         , member_functions:member_funcs , pure_virtual_member_functions:pure_virt_member_funcs

.decl Struct ( id:struct , RecordTypeContents , parents:parents )                                                 input
.decl Union  ( id:union , RecordTypeContents )                                                                    input

#undef RecordTypeContents



// Expression Nodes

.decl BindExpr        ( id:bind_expr , parameters:parameters , call:call_expr )                                   input
.decl CallExpr        ( id:call_expr , function_expr:expr )                                                       input
.decl CastExpr        ( id:cast_expr , sub_expression:expr )                                                      input
.decl InitExpr        ( id:init_expr , memory_expr:expr , init_exprs:exprs )                                      input
.decl JobExpr         ( id:job_expr , thread_num_range:node , body:node )                                         input
.decl LambdaExpr      ( id:lambda_expr , type:function_type , reference:lambda_ref, definition:lambda_def )       input
.decl LambdaReference ( id:lambda_ref , type:function_type , name:string )                                        input
.decl Literal         ( id:literal , type:type , string_value:string )                                            input
.decl IntegerLiteral  ( id:integer_literal , value:number )                                                       input
.decl TupleExpr       ( id:tuple_expr , expressions:exprs )                                                       input
.decl Variable        ( id:variable , type:type , var_id:uint )                                                   input
// piped through   .decl MarkerExpr ( id:node , expr_id:uint , sub_expression:expr                                input



// Statement Nodes

.decl BreakStmt       ( id:break_stmt )                                                                           input
.decl CompoundStmt    ( id:compound_stmt )                                                                        input
.decl ContinueStmt    ( id:continue_stmt )                                                                        input
.decl DeclarationStmt ( id:decl_stmt , declaration:declaration , variable:variable )                              input
.decl ForStmt         ( id:for_stmt , declaration:decl_stmt , end:expr , step:expr , body:compound_stmt )         input
.decl IfStmt          ( id:if_stmt , condition:expr , then_body:compound_stmt, else_body:compound_stmt )          input
.decl ReturnStmt      ( id:return_stmt , return_decl:declaration )                                                input
.decl SwitchStmt      ( id:switch_stmt , switch_expr:expr , cases:switch_cases , default_case:compound_stmt )     input
.decl ThrowStmt       ( id:throw_stmt , throw_expr:expr )                                                         input
.decl TryCatchStmt    ( id:try_catch_stmt , body:compound_stmt )                                                  input
.decl WhileStmt       ( id:while_stmt , condition:expr , body:compound_stmt )                                     input
// obsolete        .decl GotoStmt ( id:node , label:string )                                                      input
// obsolete        .decl LabelStmt ( id:node ,  label:string )                                                    input
// piped through   .decl MarkerStmt ( id:node , stmt_id:uint , sub_statement:stmt )                               input



// Support Nodes

.decl CatchClause                ( id:catch_clause , variable:variable , body:compound_stmt )                     input
.decl Declaration                ( id:declaration , type:type , initialization:expr )                             input
.decl Expressions                ( id:exprs )                                                                     input
.decl Field                      ( id:field , name:string , type:type )                                           input
.decl Fields                     ( id:fields )                                                                    input
.decl Lambda                     ( id:lambda , type:function_type , parameters:parameters, body:compound_stmt )   input
.decl LambdaBinding              ( id:lambda_binding , reference:lambda_ref , lambda:lambda )                     input
.decl LambdaDefinition           ( id:lambda_def )                                                                input
.decl MemberFunction             ( id:member_func , name:string , virtual_flag:bool , implementation:expr )       input
.decl MemberFunctions            ( id:member_funcs )                                                              input
.decl Parameters                 ( id:parameters )                                                                input
.decl Parent                     ( id:parent , virtual:bool , access_specifier_kind:uint , type:type )            input
.decl Parents                    ( id:parents )                                                                   input
.decl PureVirtualMemberFunction  ( id:pure_virt_member_func , name:string , type:function_type )                  input
.decl PureVirtualMemberFunctions ( id:pure_virt_member_funcs )                                                    input
.decl SwitchCase                 ( id:switch_case , guard:literal , body:compound_stmt )                          input
.decl SwitchCases                ( id:switch_cases )                                                              input
.decl TagTypeBinding             ( id:tag_type_binding , tag:tag_type_ref, record:record )                        input
.decl TagTypeDefinition          ( id:tag_type_def )                                                              input
.decl Types                      ( id:types )                                                                     input

// associating names to known constructs (built-ins)
.decl NamedConstruct( name : string , uid : unique_node_id )                                                      input
