/**
 * Copyright (c) 2002-2015 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details
 * regarding third party software licenses.
 */

//=================================================
// This files contains the semantic specification
// of routines so that the analysis module of 
// insieme can deal with them properly. 
//=================================================

// Other definitions here...

// math
FUNC(fabs, "(real<8>) -> real<8>", false, NO_REF);

FUNC(ceil, "(real<8>) -> real<8>", false, NO_REF);
FUNC(floor, "(real<8>) -> real<8>", false, NO_REF);

FUNC(sqrt, "(real<8>) -> real<8>", false, NO_REF);
FUNC(exp, "(real<8>) -> real<8>", false, NO_REF);

FUNC(sin, "(real<8>) -> real<8>", false, NO_REF);
FUNC(cos, "(real<8>) -> real<8>", false, NO_REF);
FUNC(tan, "(real<8>) -> real<8>", false, NO_REF);

// printf
FUNC(printf, "(ref<array<char,1>>, var_list) -> int<4>", 
	true,
	NO_REF, // this may be right
	NO_REF // this is wrong, ACCESS(USE, RANGE(PW(0),PW(1))) doesn't work
);

// exit -- not really side effect free, but as far as the analysis is concerned it might as well be
FUNC(exit, "(int<4>)->unit", false, NO_REF)

FUNC(memcpy, "(anyref, anyref, uint<8>) -> unit",
     true,
	 ACCESS(RANGE_OFFSET(DEF,ARG(0),TO_PW(ARG(2)))),
	 ACCESS(RANGE_OFFSET(USE,ARG(0),TO_PW(ARG(2)))),
	 NO_REF);

