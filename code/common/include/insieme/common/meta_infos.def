/**
 * Copyright (c) 2002-2017 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 */
// ------------ interface ------------------

#ifndef INFO_DECL
#define INFO_DECL(_text)
#endif

#ifndef INFO_STRUCT_BEGIN
#define INFO_STRUCT_BEGIN(_name)
#endif

#ifndef INFO_FIELD_EXT
#define INFO_FIELD_EXT(_name, _c_type, _c_default, _cpp_type, _cpp_default)
#endif

#ifndef INFO_FIELD
#define INFO_FIELD(_name, _type, _default) INFO_FIELD_EXT(_name, _type, _default, _type, _default)
#endif

#ifndef INFO_STRUCT_END
#define INFO_STRUCT_END()
#endif

// ------------ definitions ------------------

/**
 * A struct providing information about the estimated relative effort of the associated loop.
 * If an estimation function can be computed, its parameters are the loop boundaries of the
 * segment of the loop information is requested for.
 * In any case, a fallback per-iteration estimate is provided.
 */
INFO_DECL(typedef void (*estimation_function_type)(int, int))
INFO_STRUCT_BEGIN(effort_estimation)
INFO_FIELD(estimation_function, estimation_function_type, 0)
INFO_FIELD(fallback_estimate, int, 0)
INFO_STRUCT_END()

/**
 * OpenMP+ objective
 */

INFO_STRUCT_BEGIN(ompp_objective)
INFO_FIELD(energy_weight, float, 0)
INFO_FIELD(energy_min, float, -1)
INFO_FIELD(energy_max, float, -1)
INFO_FIELD(power_weight, float, 0)
INFO_FIELD(power_min, float, -1)
INFO_FIELD(power_max, float, -1)
INFO_FIELD(quality_weight, float, 0)
INFO_FIELD(quality_min, float, -1)
INFO_FIELD(quality_max, float, -1)
INFO_FIELD(time_weight, float, 0)
INFO_FIELD(time_min, float, -1)
INFO_FIELD(time_max, float, -1)
INFO_FIELD(param_count, unsigned, UINT_MAX)
INFO_FIELD(region_id, unsigned, UINT_MAX)
INFO_STRUCT_END()

/**
 * A struct providing information about work-items which were generated by the opencl backend
 */
INFO_STRUCT_BEGIN(opencl)
INFO_FIELD(opencl, bool, false)
INFO_FIELD(kernel_id, unsigned, UINT_MAX)
INFO_FIELD(device_type, unsigned, UINT_MAX)
INFO_STRUCT_END()

/*
 * A struct providing information about region-based autotuning settings
 */
INFO_STRUCT_BEGIN(autotuning)
INFO_FIELD_EXT(frequencies, struct {
	unsigned size;
	unsigned* data;
}, {0}, vector<unsigned>, toVector(0u))
INFO_FIELD_EXT(map, struct {
	unsigned size;
	unsigned* data;
}, {0}, vector<unsigned>, toVector(0u))
INFO_FIELD(number_of_workers, unsigned, 0)
INFO_FIELD(loop_scheduling, int, 0)
INFO_FIELD(loop_scheduling_chunk_size, unsigned, 0)
INFO_STRUCT_END()

/*
 * A struct providing information about region-based significance settings
 */
INFO_STRUCT_BEGIN(significance)
INFO_FIELD_EXT(label, const char*, "", string, string())
INFO_STRUCT_END()

// ------------ clear definitions ------------------

#undef INFO_DECL
#undef INFO_STRUCT_BEGIN
#undef INFO_FIELD
#undef INFO_FIELD_EXT
#undef INFO_STRUCT_END
