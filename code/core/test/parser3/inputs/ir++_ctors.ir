
let int = int<4>;

let A = struct {
	int x;
};

let B = struct : [A]{
	int y;
};

let ctorA1 = lambda ctor A::() { this.x = 0; };
let ctorA2 = lambda ctor A::(int x) { this.x = x; };

unit main() {

	// create a stack based A
	decl ref<A> a1 = ctorA1(var(undefined(A)));
	
	// create a heap based A
	decl ref<A> a2 = ctorA1(new(undefined(A)));
	
	// create a stack based A with initial value
	decl ref<A> a3 = ctorA2(var(undefined(A)), 2);
	
	// create a stack based A with initial value
	decl ref<A> a4 = ctorA2(new(undefined(A)), 3);
	
	// re-initialize an existing variable (placement new)
	decl ref<A> a5; ctorA2(a5, 4);
	
	print("a1.x = %d\n", *a1.x);
	print("a2.x = %d\n", *a2.x);
	print("a3.x = %d\n", *a3.x);
	print("a4.x = %d\n", *a4.x);
	print("a5.x = %d\n", *a5.x);
			
}
