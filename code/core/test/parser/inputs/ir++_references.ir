
let int = int<4>;

let intRef = struct { ref<int> _cpp_ref; };
let refType = struct { ref<'a> _cpp_ref; };

let cpp2ir = lambda (struct { ref<'a> _cpp_ref; } x)->ref<'a> { return x._cpp_ref; };

let ir2cpp = lambda (ref<'a> x)->struct { ref<'a> _cpp_ref; } { return struct refType { x }; };

let dummy = lambda (struct {} x) -> struct {} { return x; };

unit main() {
	
	// create a reference
	decl ref<int> x;
	
	// should work with explict type ..
	decl intRef y = ir2cpp(x);

	// ... and auto
	decl auto z = ir2cpp(x);
}
