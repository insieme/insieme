/**
 * Copyright (c) 2002-2015 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details
 * regarding third party software licenses.
 */



// Vectors ------------------------------------------------------------------------------------------------------------

GROUP(VectorOp, VectorSubscript, VectorInitUniform, VectorInitUndefined, VectorRefElem, VectorPointwise, 
      VectorPointwiseUnary, VectorReduction, VectorPermute, VectorProjection, VectorRefProjection, RefVectorToRefArray, RefVectorToSrcArray)
GROUP(Pointwise, VectorPointwise, VectorPointwiseUnary)

// deprecated
LITERAL(VectorSubscript,      	"vector_subscript",      	"(vector<'elem,#l>, uint<#a>) -> 'elem")
LITERAL(VectorInitUndefined,  	"vector_init_undefined",  	"(type<'elem>, intTypeParam<#a>) -> vector<'elem,#a>")
LITERAL(VectorInitUniform,    	"vector_init_uniform",  "('elem, intTypeParam<#a> ) -> vector<'elem,#a>")
//DERIVED(VectorInitUniform,   	"vector_init_uniform",  "lambda ('elem value, intTypeParam<#a> size) -> vector<'elem,#a>{"
//                                                        "    decl ref<vector<'elem, #a>> res = var(vector_init_undefined(lit('elem), size));"
//                                                        "    for (uint<8> i = 0ul .. to_uint(size)){"
//                                                        "        res[i] = value;"
//                                                        "    }"
//                                                        "    return *res;"
//                                                        "}")

//TODO: I would love to convert this, but i find no way to manipulate lists in IR
LITERAL(VectorInitPartial, 		"vector_init_partial",		"(list<'elem>, intTypeParam<#n>) -> vector<'elem,#n>")

DERIVED(VectorRefElem, 			"vector_ref_elem", 			
        "lambda (ref<vector<'elem,#l>> v, uint<8> i) -> ref<'elem> { return ref_narrow(v, dp_element(dp_root, i), lit('elem)); }")

DERIVED(VectorPointwise,		"vector_pointwise",			
	" lambda (('elem1, 'elem2) => 'res op) -> (vector<'elem1,#l>, vector<'elem2,#l>) => vector<'res, #l> {"
	"     return lambda (vector<'elem1,#l> v1, vector<'elem2,#l> v2) =>      "
	"                     lambda (vector<'elem1,#l> v1, vector<'elem2,#l> v2, ('elem1, 'elem2) => 'res op) -> vector<'res,#l> {"
	"         decl ref<vector<'res,#l>> res = var(undefined(vector<'res,#l>));"
	"         for(uint<8> i = 0u .. to_uint(param(#l)) ) { res[i] = op(v1[i], v2[i]); }"
	"         return *res;"
	"     }(v1, v2, op);"
	" }")

DERIVED(VectorPointwiseUnary,		"vector_pointwise_unary",
	" lambda (('elem) -> 'res op) -> (vector<'elem,#l>) => vector<'res, #l> {"
	"     return lambda (vector<'elem,#l> v) => lambda (vector<'elem,#l> v, ('elem) -> 'res op) -> vector<'res,#l> {"
	"         decl ref<vector<'res,#l>> res = var(undefined(vector<'res,#l>));"
	"         for(uint<8> i = 0u .. to_uint(param(#l)) ) { res[i] = op(v[i]); }"
	"         return *res;"
	"     }(v, op);"
	" }")

DERIVED(VectorReduction,      	"vector_reduction", 
	" lambda (vector<'a,#n> v, 'b init, ('b, 'a) -> 'b f) -> 'b {"
	"     decl ref<'b> res = var(init);"
	"     for (uint<8> i = 0u .. to_uint(param(#n))){"
	"        res = f(*res, v[0]);"
	"     };"
	"     return *res;"
	" }")

DERIVED(VectorPermute,        	"vector_permute",   
	"lambda (vector<'a,#n> v, vector<uint<#a>, #m> p) -> vector<'a,#m>{"
	"    decl ref<vector<'a, #m>> res = var(vector_init_undefined(lit('a), param(#m)));"
	"    for (uint<8> i = 0u .. to_uint(param(#m))){"
	"        res[i] = v[p[i]];"
	"    }"
	"    return *res;"
	"}")

LITERAL(VectorRefPermute, 	"vector_ref_permute",
	"(ref<vector<'elem, #n>>, vector<uint<#a>, #m>) -> ref<vector<'elem, #m>>")

DERIVED(VectorProjection, 		"vector_projection", 
	"lambda (vector<'elem, #n> v, intTypeParam<#a> begin, intTypeParam<#b> end) -> vector<'elem, #b>{"
	"    decl ref<vector<'elem, #b>> res = var(vector_init_undefined(lit('elem), param(#b)));"
	"    for (uint<8> i = 0ul .. to_uint(param(#b))-  to_uint(param(#a))){"
	"        res[i] = v[i + to_uint(param(#a))];"
	"    }"
	"    return *res;"
	"}")

//LITERAL(VectorRefProjection, 	"vector_ref_projection",
//	"(ref<vector<'elem, #n>>, intTypeParam<#a>, intTypeParam<#b>) -> ref<vector<'elem, #b>>")
DERIVED(VectorRefProjection, 	"vector_ref_projection",
   "lambda (ref<vector<'elem, #n>> v, intTypeParam<#a> begin, intTypeParam<#b> end) -> ref<vector<'elem, #b>>{"
   "   return  ref_reinterpret(array_view(ref_reinterpret(v, lit(array<'elem,1>)), uint_to_int(to_uint(param(#a)),param(8))), lit(vector<'elem, #b>) );"
   "}")

DERIVED(RefVectorToRefArray, 	"ref_vector_to_ref_array",		"lambda (ref<vector<'elem,#l>> a) -> ref<array<'elem,1>> { return ref_reinterpret(a, lit(array<'elem,1>)); }")
DERIVED(RefVectorToSrcArray, 	"ref_vector_to_src_array",		"lambda (ref<vector<'elem,#l>> a) -> src<array<'elem,1>> { return ref_reinterpret(a, lit(array<'elem,1>)); }")
