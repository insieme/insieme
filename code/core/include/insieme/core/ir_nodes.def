/**
 * Copyright (c) 2002-2016 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details
 * regarding third party software licenses.
 */

// ----------------------------------------------------------------------------------
// 				  X-Macro file describing IR Node Properties
// ----------------------------------------------------------------------------------
// This file describes the IR nodes and their relation using MACRO names. The file
// may be used to create code for inspecting / transforming INSPIRE trees using actual
// definitions of the macros.
// ----------------------------------------------------------------------------------

// ----------- MACRO definitions -----------------
//  The following macros may be defined outside this file, within the context
//  it gets included. By default, all of them will be defined to be empty.

//
// --- Properties ---
//

// This macro is used to announce a node type.
#if !defined NODE
#define NODE(name)
#define __INTERNAL_NODE_DEFINITION
#endif /* NODE definition */

// This macro will be added for each node without a sub-type
#if !defined TERMINAL
#define TERMINAL(name)
#define __INTERNAL_TERMINAL_DEFINITION
#endif /* TERMINAL definition */

// This macro will be added for each node wich is not a terminal (has sub-types
#if !defined NON_TERMINAL
#define NON_TERMINAL(name)
#define __INTERNAL_NON_TERMINAL_DEFINITION
#endif /* NON_TERMINAL definition */

// A macro to mark abstract nodes
#if !defined ABSTRACT
#define ABSTRACT(name)
#define __INTERNAL_ABSTRACT_DEFINITION
#endif /* ABSTRACT definition */

// A macro to mark concrete nodes (non-abstract nodes)
#if !defined CONCRETE
#define CONCRETE(name)
#define __INTERNAL_CONCRETE_DEFINITION
#endif /* CONCRETE definition */

// This macro is used to describe an IS_A relation between node types
#if !defined IS_A
#define IS_A(type, base)
#define __INTERNAL_IS_A_DEFINITION
#endif /* IS_A definition */


//
// --- Macros to describe nodes within this file ---
//

/**
 * The AST_BASE macro is used to define the BASE node of the AST.
 * (It should only be used once)
 */
#if !defined AST_BASE
#define AST_BASE(name)                                                                                                                                         \
	NODE(name)                                                                                                                                                 \
	NON_TERMINAL(name)                                                                                                                                         \
	ABSTRACT(name)
#define __INTERNAL_AST_BASE_DEFINITON
#endif

/**
 * The AST_NODE macro adds a new node which is derived from another
 * node type and still has further sub-types.
 */
#if !defined AST_NODE
#define AST_NODE(name, baseType)                                                                                                                               \
	NODE(name)                                                                                                                                                 \
	IS_A(name, baseType)                                                                                                                                       \
	NON_TERMINAL(name)
#define __INTERNAL_AST_NODE_DEFINITON
#endif

/**
 * The AST_TERMINAL macro defines a new node type which is derived from
 * the given base type and does not have any further sub-types.
 */
#if !defined AST_TERMINAL
#define AST_TERMINAL(name, baseType)                                                                                                                           \
	NODE(name)                                                                                                                                                 \
	IS_A(name, baseType)                                                                                                                                       \
	TERMINAL(name)                                                                                                                                             \
	CONCRETE(name)
#define __INTERNAL_AST_TERMINAL_DEFINITON
#endif


// ------------------------- BEGIN: AST NODE DEFINITONS ----------------------------

//
// --- Base Node ---
//
AST_BASE(Node)


//
// --- Value Nodes ---
//

AST_NODE(Value, Node)
AST_TERMINAL(BoolValue, Value)
AST_TERMINAL(CharValue, Value)
AST_TERMINAL(IntValue, Value)
AST_TERMINAL(UIntValue, Value)
AST_TERMINAL(StringValue, Value)


//
// --- Types ---
//

// add type node
AST_NODE(Type, Node)
ABSTRACT(Type)

// and type constructors ...
AST_TERMINAL(TypeVariable, Type)
AST_TERMINAL(FunctionType, Type)
AST_TERMINAL(TupleType, Type)

// + generic type
AST_TERMINAL(GenericType, Type)

// + numeric types
AST_TERMINAL(NumericType, Type)

// + recursive types (aka tag type)
AST_TERMINAL(TagType, Type)
AST_TERMINAL(TagTypeReference, Type)


//
// --- Statements ---
//

AST_NODE(Statement, Node)

AST_TERMINAL(BreakStmt, Statement)
AST_TERMINAL(ContinueStmt, Statement)
AST_TERMINAL(ReturnStmt, Statement)
AST_TERMINAL(DeclarationStmt, Statement)
AST_TERMINAL(CompoundStmt, Statement)
AST_TERMINAL(WhileStmt, Statement)
AST_TERMINAL(ForStmt, Statement)
AST_TERMINAL(IfStmt, Statement)
AST_TERMINAL(SwitchStmt, Statement)

// + exception handling for C++
AST_TERMINAL(ThrowStmt, Statement)
AST_TERMINAL(TryCatchStmt, Statement)

// labels
AST_TERMINAL(LabelStmt, Statement)
AST_TERMINAL(GotoStmt, Statement)

//
// --- Expressions ---
//

AST_NODE(Expression, Statement)

AST_TERMINAL(Literal, Expression)
AST_TERMINAL(Variable, Expression)

AST_TERMINAL(LambdaExpr, Expression)
AST_TERMINAL(LambdaReference, Expression)
AST_TERMINAL(BindExpr, Expression)

AST_TERMINAL(CallExpr, Expression)
AST_TERMINAL(CastExpr, Expression)

AST_TERMINAL(TupleExpr, Expression)
AST_TERMINAL(InitExpr, Expression)
AST_TERMINAL(JobExpr, Expression)


//
// --- Program ---
//

AST_TERMINAL(Program, Node)

//
// --- Supporting Nodes ---
//

AST_NODE(Support, Node)
AST_TERMINAL(Types, Support)

AST_TERMINAL(TagTypeBinding, Support)
AST_TERMINAL(TagTypeDefinition, Support)

AST_NODE(Record, Support)
ABSTRACT(Record)

AST_TERMINAL(Struct, Record)
AST_TERMINAL(Union, Record)

AST_TERMINAL(Field, Support)
AST_TERMINAL(Fields, Support)

AST_TERMINAL(MemberFunction, Support)
AST_TERMINAL(MemberFunctions, Support)

AST_TERMINAL(PureVirtualMemberFunction, Support)
AST_TERMINAL(PureVirtualMemberFunctions, Support)

AST_TERMINAL(Parent, Support)
AST_TERMINAL(Parents, Support)

AST_TERMINAL(Lambda, Support)
AST_TERMINAL(LambdaBinding, Support)
AST_TERMINAL(LambdaDefinition, Support)

AST_TERMINAL(NamedValue, Support)

AST_TERMINAL(SwitchCase, Support)
AST_TERMINAL(SwitchCases, Support)

AST_TERMINAL(CatchClause, Support)

AST_TERMINAL(Parameters, Support)
AST_TERMINAL(Expressions, Support)

//
// --- Marker ---
//
AST_TERMINAL(MarkerExpr, Expression)
AST_TERMINAL(MarkerStmt, Statement)


// ------------------------- END: AST NODE DEFINITONS ----------------------------

// --- Cleaning up Macro definitions ---

#ifdef __INTERNAL_NODE_DEFINITION
#undef __INTERNAL_NODE_DEFINITION
#undef NODE
#endif

#ifdef __INTERNAL_IS_A_DEFINITION
#undef __INTERNAL_IS_A_DEFINITION
#undef IS_A
#endif

#ifdef __INTERNAL_TERMINAL_DEFINITION
#undef __INTERNAL_TERMINAL_DEFINITION
#undef TERMINAL
#endif

#ifdef __INTERNAL_NON_TERMINAL_DEFINITION
#undef __INTERNAL_NON_TERMINAL_DEFINITION
#undef NON_TERMINAL
#endif

#ifdef __INTERNAL_ABSTRACT_DEFINITION
#undef __INTERNAL_ABSTRACT_DEFINITION
#undef ABSTRACT
#endif

#ifdef __INTERNAL_CONCRETE_DEFINITION
#undef __INTERNAL_CONCRETE_DEFINITION
#undef CONCRETE
#endif

#ifdef __INTERNAL_AST_BASE_DEFINITON
#undef __INTERNAL_AST_BASE_DEFINITON
#undef AST_BASE
#endif

#ifdef __INTERNAL_AST_NODE_DEFINITON
#undef __INTERNAL_AST_NODE_DEFINITON
#undef AST_NODE
#endif

#ifdef __INTERNAL_AST_TERMINAL_DEFINITON
#undef __INTERNAL_AST_TERMINAL_DEFINITON
#undef AST_TERMINAL
#endif
