/**
 * Copyright (c) 2002-2015 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details
 * regarding third party software licenses.
 */

#ifndef FLAG
#define FLAG(NAME, ID, DESCRIPTION)
#endif

#ifndef PARAMETER
#define PARAMETER(NAME, ID, ARG_TYPE, DEFAULT_VALUE, DESCRIPTION)
#endif

#ifndef OPTION
#define OPTION(NAME, ID, ARG_TYPE, DEFAULT_VALUE, DESCRIPTION)
#endif

FLAG("benchmark-core", benchmarkCore, "benchmarking of some standard core operations on the intermediate representation")
FLAG("check-sema-only", checkSemaOnly, "run semantic checks on the generated IR and stop afterwards")
FLAG("check-sema", checkSema, "run semantic checks on the generated IR")
FLAG("compile,c", compileOnly, "compilation only")
FLAG("debug-information,g", debug, "produce debug information")
FLAG("help,h", help, "produce help message")
FLAG("mark-scop", markScop, "mark SCoPs (Static COntrol Parts) in the IR (analysis only")
FLAG("no-warnings", noWarnings, "inhibit all warnings")
FLAG("progress", progress, "show progress bar for frontend conversion process")
FLAG("show-stats", showStatistics, "computes statistics regarding the composition of the IR")
FLAG("use-pm", usePM, "perform code transformations using the Polyhedral Model")
FLAG("version,v", version, "print full version string")
FLAG("dumpversion", dumpVersion, "print minimal version string")
FLAG("win-cross-compile", winCrossCompile, "set cross compilation for a Windows target")
FLAG("print-clang-ast", printClangAST, "print the clang AST")
FLAG("fnodefaultextensions", noDefaultExtensions, "disables all frontend extensions that are enabled by default")

FLAG("estimate-effort", estimateEffort, "enables generation of the effort estimation function")
FLAG("task-granularity-tuning", taskGranularityTuning, "enables multiverisoning of parallel tasks")

PARAMETER("backend", backend, std::string, "runtime", "backend selection")
PARAMETER("outfile,o", outFile, frontend::path, "a.out", "output file")
PARAMETER("std", standard, std::vector<std::string>, std::vector<std::string>({"auto"}), "language standard")
PARAMETER("x", language, std::string, "undefined", "language setting")

OPTION("cross-compile-dir", crossCompileDir, std::string, std::string(), "set system header directory for cross compilation.")
OPTION("definitions,D", definitions, std::vector<std::string>, std::vector<std::string>(), "definition(s)")
OPTION("dump-cfg", dumpCFG, frontend::path, "a.dot", "print dot graph of the CFG")
OPTION("dump-ir", dumpIR, frontend::path, "a.ir", "dump intermediate representation")
OPTION("dump-trg", dumpTRG, frontend::path, "a.c", "dump target code")
OPTION("dump-trg-only", dumpTRGOnly, frontend::path, "a.c", "dump target code and stop afterwards")
OPTION("dump-tu", dumpTU, frontend::path, "a.tu", "dump translation unit")
OPTION("fopt", optimizationFlags, std::vector<std::string>, std::vector<std::string>(), "optimization flags")
OPTION("include-path,I", includePaths, std::vector<frontend::path>, std::vector<frontend::path>(), "additional user include search path(s)")
OPTION("input-file", inFiles, std::vector<frontend::path>, std::vector<frontend::path>(), "input file(s)")
OPTION("intercept-include", interceptIncludes, std::vector<frontend::path>, std::vector<frontend::path>(), "intercepted include file(s)")
OPTION("intercept", intercept, std::vector<std::string>, std::vector<std::string>(), "regular expression(s) to be intercepted")
OPTION("isystem", systemIncludePaths, std::vector<frontend::path>, std::vector<frontend::path>(), "additional system include search path(s)")
OPTION("library-file,l", libraryFiles, std::vector<frontend::path>, std::vector<frontend::path>(), "linker flag(s)/file(s)")
OPTION("library-path,L", libraryPaths, std::vector<frontend::path>, std::vector<frontend::path>(), "library search path(s)")
OPTION("dump-kernel", dumpOclKernel, frontend::path, "a.cl", "dump OpenCL kernel")
OPTION("optimization,O", optimization, std::string, std::string(), "optimization flag")
OPTION("print-clang-ast-filter", clangASTDumpFilter, std::string, std::string(), "set a regular expression to filter the clang AST dump.")

#undef FLAG
#undef PARAMETER
#undef OPTION
