/**
 * Copyright (c) 2002-2015 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details
 * regarding third party software licenses.
 */

// FLAG(opt_name, opt_id, var_name, def_value, var_help)
FLAG("help,h", "help", Help, false, "produce help message")
FLAG("version,V", "version", Version, false, "print version string")

// frontend options
FLAG("omp-sema", "omp-sema", OpenMP, false, "enable OpenMP semantics in frontend")
FLAG("opencl", "opencl", OpenCL, false, "enable OpenCL semantics in frontend")
FLAG("icl", "icl", lib_icl, false, "enable lib_icl semantics in frontend")
FLAG("cilk", "cilk", Cilk, false, "enable Cilk semantics in frontend")
FLAG("tag-mpi", "tag-mpi", MPITag, false, "add mpi pragma to MPI statements in the program and assign unique ID")
FLAG("clang-cfg-dump", "clang-cfg-dump", ClangCFGDump, false, "Dump cfg graph of clang")
FLAG("const-prop", "const-prop", ConstantPropagation, false, "Perform constant propagation")

// core options
FLAG("benchmark-core", "benchmark-core", BenchmarkCore, false, "runs some standard-core operations on the IR representation")
FLAG("test,T", "test", Test, false, "Enable the test function which should test some pre-released features of insieme")
FLAG("feat-extract,f", "feat-extract", FeatureExtract, false, "Enables feature extraction")
FLAG("task-opt", "task-opt", TaskOpt, false, "Enables task optimization by means of multi-versioning")
FLAG("win-cross-compile", "win-cross-compile", WinCrossCompile, false, "Set cross compilation for a Windows target")
FLAG("gem-cross-compile", "gem-cross-compile", GemCrossCompile, false, "Set cross compilation for the GEMSCLAIM target")

// backend options
FLAG("estimate-effort", "estimate-effort", EstimateEffort, false, "Enables generation of the effort estimation function")
FLAG("use-pm", "use-pm", UsePM, false, "Perform code transformations using the Polyhedral Model")
FLAG("mark-scop", "mark-scop", MarkScop, false, "Mark SCoPs (Static COntrol Parts) in the IR (analysis only)")

// output options
FLAG("pretty-print,P", "pretty-print", PrettyPrint, false, "pretty print the IR after frontend conversion")
FLAG("show-line-no", "show-num", ShowLineNo, true, "Show line numbers when the IR code is printed to the standard output")
// FLAG("timer",              "timer",                 UseTimer,   false, "Show timing information for code analysis and transformation")
FLAG("check-sema,S", "check-sema", CheckSema, false, "run semantics check on the generated IR")
FLAG("show-stats", "show-stats", ShowStats, false, "computes statistics regarding the composition of the IR")
// FLAG("cleanup,C",			"cleanup", 				Cleanup, 		false,	"applies some cleanup operations to the IR produced by the frontend")

// OPTION(opt_name, opt_id, var_name, var_type, var_help)

// backend selection
OPTION("backend,b", "backend", Backend, std::string, "Backend Selection: sequential | runtime | ocl | pthread")

OPTION("log-level,L", "log-level", LogLevel, std::string, "Log level: DEBUG|INFO|WARN|ERROR|FATAL")
OPTION("input-file", "input-file", InputFiles, std::vector<path>, "input file(s)")
OPTION("include-path,I", "include-path", IncludePaths, std::vector<path>, "Add directory to include search path")
OPTION("std", "std", Standard, std::vector<std::string>, "Set compatibility mode")
OPTION("definitions,D", "definitions", Defs, std::vector<std::string>, "Add a preprocessor definition")
OPTION("show-ir", "show-ir", ShowIR, std::string, "Print a dot representation of the IR")
OPTION("dump-xml", "dump-xml", DumpXML, std::string, "Print the xml representation of the IR")
OPTION("load-xml", "load-xml", LoadXML, std::string, "Load an xml contanining an IR")
OPTION("dump-ir", "dump-ir", DumpIR, std::string, "Print the pretty printed representation of the IR")
OPTION("out-file,o", "out-file", Output, std::string, "output file")
OPTION("dump-cfg", "dump-cfg", CFG, std::string, "Print dot graph of the CFG")

OPTION("intercept", "intercept", Interceptions, std::vector<std::string>, "Add a regular expression to be intercepted")
OPTION("intercept-include", "intercept-include", InterceptionHeaderDirs, std::vector<path>, "Add include dir which contains headers to be intercepted")
OPTION("cross-compile", "cross-compile", CrossCompile, std::string, "Set cross compilation. System Headers path must be provided.")

// INT_OPTION(opt_name, opt_id, var_name, def_value, var_help)
INT_OPTION("verbose,v", "verbosity", Verbosity, 0, "Set verbosity level")
INT_OPTION("col-wrap", "column-wrap", ColumnWrap, -1, "Wrap the output of the pretty printer up to specified size")

// Cache Parameters
INT_OPTION("cache-size", "cache-size", CacheSize, (4 * 1024 * 1024),
           "Set the cache size which should be used by the analysis module to estimate cache behavior")
INT_OPTION("cache-line-size", "cache-line-size", CacheLineSize, 64,
           "Set the size of a cache line which should be utilized by the analysis module to estimate cache behavior")
INT_OPTION("cache-associativity", "cache-associativity", CacheAssociativity, 8,
           "Set the associativity level of the cache which should be utilized by the analysis module to estimate cache behavior")
