/**
 * Copyright (c) 2002-2016 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details
 * regarding third party software licenses.
 */

/**
 * This macro file defines the metrices supported by the measuring
 * infrastructure.
 *
 * The macro
 * 			METRIC(A,B,C,D)
 * is defining a macro with
 * 		A ... the name of the literal (static constant member of Metric)
 * 		B ... the name to be printed and used within the performance log
 * 		C ... the measurement unit of this metric
 * 		D ... the aggreagation function
 * 					none ... if it is not derived
 */


// non-derived metrics (directly obtained from the runtime)

// metrics offered by the runtime
METRIC(WALL_TIME, "wall_time", ns, none);
METRIC(CPU_TIME, "cpu_time", ns, none);
METRIC(NUM_EXEC, "num_executions", unit, none);
METRIC(CPU_ENERGY, "cpu_energy", j, none);
METRIC(CORES_ENERGY, "cores_energy", j, none);
METRIC(MC_ENERGY, "mc_energy", j, none);

// TODO: re-enable when available again
// METRIC(NUM_WORKERS,			"num_workers",				unit,		none);

// imported from PAPI
METRIC(PAPI_L1_DCM, "PAPI_L1_DCM", unit, none);
METRIC(PAPI_L1_ICM, "PAPI_L1_ICM", unit, none);
METRIC(PAPI_L2_DCM, "PAPI_L2_DCM", unit, none);
METRIC(PAPI_L2_ICM, "PAPI_L2_ICM", unit, none);
METRIC(PAPI_L3_DCM, "PAPI_L3_DCM", unit, none);
METRIC(PAPI_L3_ICM, "PAPI_L3_ICM", unit, none);
METRIC(PAPI_L1_TCM, "PAPI_L1_TCM", unit, none);
METRIC(PAPI_L2_TCM, "PAPI_L2_TCM", unit, none);
METRIC(PAPI_L3_TCM, "PAPI_L3_TCM", unit, none);
METRIC(PAPI_CA_SNP, "PAPI_CA_SNP", unit, none);
METRIC(PAPI_CA_SHR, "PAPI_CA_SHR", unit, none);
METRIC(PAPI_CA_CLN, "PAPI_CA_CLN", unit, none);
METRIC(PAPI_CA_INV, "PAPI_CA_INV", unit, none);
METRIC(PAPI_CA_ITV, "PAPI_CA_ITV", unit, none);
METRIC(PAPI_L3_LDM, "PAPI_L3_LDM", unit, none);
METRIC(PAPI_L3_STM, "PAPI_L3_STM", unit, none);
METRIC(PAPI_BRU_IDL, "PAPI_BRU_IDL", unit, none);
METRIC(PAPI_FXU_IDL, "PAPI_FXU_IDL", unit, none);
METRIC(PAPI_FPU_IDL, "PAPI_FPU_IDL", unit, none);
METRIC(PAPI_LSU_IDL, "PAPI_LSU_IDL", unit, none);
METRIC(PAPI_TLB_DM, "PAPI_TLB_DM", unit, none);
METRIC(PAPI_TLB_IM, "PAPI_TLB_IM", unit, none);
METRIC(PAPI_TLB_TL, "PAPI_TLB_TL", unit, none);
METRIC(PAPI_L1_LDM, "PAPI_L1_LDM", unit, none);
METRIC(PAPI_L1_STM, "PAPI_L1_STM", unit, none);
METRIC(PAPI_L2_LDM, "PAPI_L2_LDM", unit, none);
METRIC(PAPI_L2_STM, "PAPI_L2_STM", unit, none);
METRIC(PAPI_BTAC_M, "PAPI_BTAC_M", unit, none);
METRIC(PAPI_PRF_DM, "PAPI_PRF_DM", unit, none);
METRIC(PAPI_L3_DCH, "PAPI_L3_DCH", unit, none);
METRIC(PAPI_TLB_SD, "PAPI_TLB_SD", unit, none);
METRIC(PAPI_CSR_FAL, "PAPI_CSR_FAL", unit, none);
METRIC(PAPI_CSR_SUC, "PAPI_CSR_SUC", unit, none);
METRIC(PAPI_CSR_TOT, "PAPI_CSR_TOT", unit, none);
METRIC(PAPI_MEM_SCY, "PAPI_MEM_SCY", unit, none);
METRIC(PAPI_MEM_RCY, "PAPI_MEM_RCY", unit, none);
METRIC(PAPI_MEM_WCY, "PAPI_MEM_WCY", unit, none);
METRIC(PAPI_STL_ICY, "PAPI_STL_ICY", unit, none);
METRIC(PAPI_FUL_ICY, "PAPI_FUL_ICY", unit, none);
METRIC(PAPI_STL_CCY, "PAPI_STL_CCY", unit, none);
METRIC(PAPI_FUL_CCY, "PAPI_FUL_CCY", unit, none);
METRIC(PAPI_HW_INT, "PAPI_HW_INT", unit, none);
METRIC(PAPI_BR_UCN, "PAPI_BR_UCN", unit, none);
METRIC(PAPI_BR_CN, "PAPI_BR_CN", unit, none);
METRIC(PAPI_BR_TKN, "PAPI_BR_TKN", unit, none);
METRIC(PAPI_BR_NTK, "PAPI_BR_NTK", unit, none);
METRIC(PAPI_BR_MSP, "PAPI_BR_MSP", unit, none);
METRIC(PAPI_BR_PRC, "PAPI_BR_PRC", unit, none);
METRIC(PAPI_FMA_INS, "PAPI_FMA_INS", unit, none);
METRIC(PAPI_TOT_IIS, "PAPI_TOT_IIS", unit, none);
METRIC(PAPI_TOT_INS, "PAPI_TOT_INS", unit, none);
METRIC(PAPI_INT_INS, "PAPI_INT_INS", unit, none);
METRIC(PAPI_FP_INS, "PAPI_FP_INS", unit, none);
METRIC(PAPI_LD_INS, "PAPI_LD_INS", unit, none);
METRIC(PAPI_SR_INS, "PAPI_SR_INS", unit, none);
METRIC(PAPI_BR_INS, "PAPI_BR_INS", unit, none);
METRIC(PAPI_VEC_INS, "PAPI_VEC_INS", unit, none);
METRIC(PAPI_RES_STL, "PAPI_RES_STL", unit, none);
METRIC(PAPI_FP_STAL, "PAPI_FP_STAL", unit, none);
METRIC(PAPI_TOT_CYC, "PAPI_TOT_CYC", unit, none);
METRIC(PAPI_LST_INS, "PAPI_LST_INS", unit, none);
METRIC(PAPI_SYC_INS, "PAPI_SYC_INS", unit, none);
METRIC(PAPI_L1_DCH, "PAPI_L1_DCH", unit, none);
METRIC(PAPI_L2_DCH, "PAPI_L2_DCH", unit, none);
METRIC(PAPI_L1_DCA, "PAPI_L1_DCA", unit, none);
METRIC(PAPI_L2_DCA, "PAPI_L2_DCA", unit, none);
METRIC(PAPI_L3_DCA, "PAPI_L3_DCA", unit, none);
METRIC(PAPI_L1_DCR, "PAPI_L1_DCR", unit, none);
METRIC(PAPI_L2_DCR, "PAPI_L2_DCR", unit, none);
METRIC(PAPI_L3_DCR, "PAPI_L3_DCR", unit, none);
METRIC(PAPI_L1_DCW, "PAPI_L1_DCW", unit, none);
METRIC(PAPI_L2_DCW, "PAPI_L2_DCW", unit, none);
METRIC(PAPI_L3_DCW, "PAPI_L3_DCW", unit, none);
METRIC(PAPI_L1_ICH, "PAPI_L1_ICH", unit, none);
METRIC(PAPI_L2_ICH, "PAPI_L2_ICH", unit, none);
METRIC(PAPI_L3_ICH, "PAPI_L3_ICH", unit, none);
METRIC(PAPI_L1_ICA, "PAPI_L1_ICA", unit, none);
METRIC(PAPI_L2_ICA, "PAPI_L2_ICA", unit, none);
METRIC(PAPI_L3_ICA, "PAPI_L3_ICA", unit, none);
METRIC(PAPI_L1_ICR, "PAPI_L1_ICR", unit, none);
METRIC(PAPI_L2_ICR, "PAPI_L2_ICR", unit, none);
METRIC(PAPI_L3_ICR, "PAPI_L3_ICR", unit, none);
METRIC(PAPI_L1_ICW, "PAPI_L1_ICW", unit, none);
METRIC(PAPI_L2_ICW, "PAPI_L2_ICW", unit, none);
METRIC(PAPI_L3_ICW, "PAPI_L3_ICW", unit, none);
METRIC(PAPI_L1_TCH, "PAPI_L1_TCH", unit, none);
METRIC(PAPI_L2_TCH, "PAPI_L2_TCH", unit, none);
METRIC(PAPI_L3_TCH, "PAPI_L3_TCH", unit, none);
METRIC(PAPI_L1_TCA, "PAPI_L1_TCA", unit, none);
METRIC(PAPI_L2_TCA, "PAPI_L2_TCA", unit, none);
METRIC(PAPI_L3_TCA, "PAPI_L3_TCA", unit, none);
METRIC(PAPI_L1_TCR, "PAPI_L1_TCR", unit, none);
METRIC(PAPI_L2_TCR, "PAPI_L2_TCR", unit, none);
METRIC(PAPI_L3_TCR, "PAPI_L3_TCR", unit, none);
METRIC(PAPI_L1_TCW, "PAPI_L1_TCW", unit, none);
METRIC(PAPI_L2_TCW, "PAPI_L2_TCW", unit, none);
METRIC(PAPI_L3_TCW, "PAPI_L3_TCW", unit, none);
METRIC(PAPI_FML_INS, "PAPI_FML_INS", unit, none);
METRIC(PAPI_FAD_INS, "PAPI_FAD_INS", unit, none);
METRIC(PAPI_FDV_INS, "PAPI_FDV_INS", unit, none);
METRIC(PAPI_FSQ_INS, "PAPI_FSQ_INS", unit, none);
METRIC(PAPI_FNV_INS, "PAPI_FNV_INS", unit, none);
METRIC(PAPI_FP_OPS, "PAPI_FP_OPS", unit, none);
METRIC(PAPI_SP_OPS, "PAPI_SP_OPS", unit, none);
METRIC(PAPI_DP_OPS, "PAPI_DP_OPS", unit, none);
METRIC(PAPI_VEC_SP, "PAPI_VEC_SP", unit, none);
METRIC(PAPI_VEC_DP, "PAPI_VEC_DP", unit, none);

// derived metrics
// TODO: placeholder, needs to be fixed with RAPL on kernels newer than 3.5
METRIC(TOTAL_CPU_ENERGY,			"total_cpu_energy",			j,			sum(Metric::CPU_ENERGY));
METRIC(TOTAL_RESOURCE_USAGE, "total_resource_usage", unit, none);
METRIC(TOTAL_WALL_TIME,				"total_wall_time",			ns,			sum(Metric::WALL_TIME));
METRIC(TOTAL_CPU_TIME,				"total_cpu_time",			ns,			sum(Metric::CPU_TIME));
METRIC(TOTAL_NUM_EXEC,				"total_num_exec",			unit,		sum(Metric::NUM_EXEC));

METRIC(TOTAL_PAPI_TOT_INS,			"total_papi_tot_ins",		unit,		sum(Metric::PAPI_TOT_INS));
METRIC(TOTAL_PAPI_BR_INS,			"total_papi_br_ins",		unit,		sum(Metric::PAPI_BR_INS));
METRIC(TOTAL_PAPI_L3_TCM,			"total_papi_l3_tcm",		unit,		sum(Metric::PAPI_L3_TCM));
METRIC(TOTAL_PAPI_L2_TCM,			"total_papi_l2_tcm",		unit,		sum(Metric::PAPI_L2_TCM));
METRIC(TOTAL_PAPI_STL_ICY,			"total_papi_stl_icy",		unit,		sum(Metric::PAPI_STL_ICY));

METRIC(AVG_WALL_TIME, "avg_wall_time", ns, div(Metric::WALL_TIME, Metric::NUM_EXEC));
METRIC(AVG_CPU_TIME, "avg_cpu_time", ns, div(Metric::CPU_TIME, Metric::NUM_EXEC));

METRIC(TOTAL_AVG_WALL_TIME,			"total_avg_wall_time",		ns,			div(Metric::TOTAL_WALL_TIME, Metric::TOTAL_NUM_EXEC));
METRIC(TOTAL_AVG_CPU_ENERGY,		"total_avg_cpu_energy",		j,			div(Metric::TOTAL_CPU_ENERGY, Metric::TOTAL_NUM_EXEC));

METRIC(PARALLELISM, "parallelism", unit, div(Metric::CPU_TIME, Metric::WALL_TIME));
// METRIC(AVG_EFFICIENCY,				"avg_efficiency",			unit,		avg(l_div(l_div(Metric::CPU_TIME, Metric::WALL_TIME), Metric::NUM_WORKERS)));
// METRIC(LOAD_BALANCE,				"load_balance",				unit,		div(min(l_sub(Metric::TIMESTAMP_END, Metric::TIMESTAMP_START)), max(l_sub(Metric::TIMESTAMP_END,
// Metric::TIMESTAMP_START))));
// METRIC(LOAD_VARIANCE,				"load_variance",			unit,		var(l_sub(Metric::TIMESTAMP_END, Metric::TIMESTAMP_START)));

// TODO: re-enable when number of workers is fixed for regions
// METRIC(AVG_NUM_WORKERS,				"avg_num_workers",			unit,		avg(Metric::NUM_WORKERS));
// METRIC(TOTAL_RESOURCE_USAGE,				"total_resource_usage",			ns,			none);

// METRIC(WEIGHTED_EFFICIENCY, 		"weighted_efficiency",		unit,		div(sum(l_div(Metric::CPU_TIME, Metric::NUM_WORKERS)), Metric::TOTAL_WALL_TIME));


#undef METRIC
