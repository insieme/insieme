/**
 * Copyright (c) 2002-2015 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details
 * regarding third party software licenses.
 */

/**
 * A macro file defining relations between functions and types defined within various
 * headers.
 *
 * FUN(x,y)  ... states that header file x contains a declaration of y
 * TYPE(x,y) ... states that header file x contains a definition of type y
 */

// -----------------------------------
#if ! defined FUN
	#define FUN(X,Y)
	#define __INTERNAL_FUN_DEFINITION
#endif /* NODE definition */

#if ! defined TYPE
	#define TYPE(X,Y)
	#define __INTERNAL_TYPE_DEFINITION
#endif /* NODE definition */
// -----------------------------------

FUN("assert.h", __assert_fail)

FUN("stdio.h", printf)
FUN("stdio.h", par_printf) // a lie
FUN("stdio.h", fopen)
FUN("stdio.h", fread)
FUN("stdio.h", fgetc)
FUN("stdio.h", fscanf)
FUN("stdio.h", fwrite)
FUN("stdio.h", fclose)
FUN("stdio.h", sprintf)
FUN("stdio.h", snprintf)

FUN("stdio.h", sscanf)
FUN("stdio.h", fprintf)
FUN("stdio.h", perror)

TYPE("stdio.h", "FILE")
TYPE("iostream", "__FILE")

FUN("stdlib.h", malloc)
FUN("stdlib.h", calloc)
FUN("stdlib.h", free)
FUN("stdlib.h", exit)
FUN("stdlib.h", qsort)
FUN("stdlib.h", rand)

FUN("stdlib.h", atoi)
FUN("stdlib.h", atol)
FUN("stdlib.h", atof)

FUN("stddef.h", offsetof)
FUN("stddef.h", NULL)

FUN("unistd.h", chdir)

FUN("alloca.h", alloca)

FUN("malloc.h", memalign)

FUN("string.h", memcpy)
FUN("string.h", memset)
FUN("string.h", strcmp)
FUN("string.h", strtok)
FUN("string.h", strtol)
FUN("string.h", strchr)
FUN("string.h", strrchr)
FUN("string.h", strcpy)
FUN("string.h", strlen)

FUN("time.h", strftime)
FUN("time.h", gmtime)
FUN("time.h", clock)

FUN("math.h", floor)
FUN("math.h", ceil)
FUN("math.h", min)
FUN("math.h", max)
FUN("math.h", log)
FUN("math.h", pow)
FUN("math.h", sqrt)
FUN("math.h", exp)
FUN("math.h", fabs)

FUN("math.h", __isnan)
FUN("math.h", __isnanl)
FUN("math.h", __isnanf)
FUN("math.h", __isinfl)
FUN("math.h", __isinff)

TYPE("sys/utsname.h", "struct utsname")
FUN("sys/utsname.h", uname)

FUN("libgen.h", __xpg_basename)

//==== MPI =====================================
FUN("mpi.h", MPI_Init)
FUN("mpi.h", MPI_Finalize)

FUN("mpi.h", MPI_Comm_rank)
FUN("mpi.h", MPI_Comm_size)
FUN("mpi.h", MPI_Abort)

FUN("mpi.h", MPI_Send)
FUN("mpi.h", MPI_Ssend)
FUN("mpi.h", MPI_Rsend)
FUN("mpi.h", MPI_Bsend)
FUN("mpi.h", MPI_Isend)

FUN("mpi.h", MPI_Recv)
FUN("mpi.h", MPI_Irecv)

FUN("mpi.h", MPI_Wait)
FUN("mpi.h", MPI_Waitall)
FUN("mpi.h", MPI_Waitany)
FUN("mpi.h", MPI_Test)
FUN("mpi.h", MPI_Testall)
FUN("mpi.h", MPI_Testany)

FUN("mpi.h", MPI_Probe)

FUN("mpi.h", MPI_Barrier)
FUN("mpi.h", MPI_Bcast)
FUN("mpi.h", MPI_Gather)
FUN("mpi.h", MPI_Scatter)
FUN("mpi.h", MPI_Reduce)
FUN("mpi.h", MPI_Allgather)
FUN("mpi.h", MPI_Allscatter)
FUN("mpi.h", MPI_Allreduce)
FUN("mpi.h", MPI_Alltoall)

TYPE("mpi.h", "MPI_Comm")
TYPE("mpi.h", "MPI_Status")
TYPE("mpi.h", "MPI_Request")
TYPE("mpi.h", "MPI_Datatype")

//==== OpenMPI datatypes ========================
TYPE("mpi.h", "struct ompi_datatype_t")
TYPE("mpi.h", "struct ompi_predefined_datatype_t")
TYPE("mpi.h", "struct ompi_predefined_communicator_t")
TYPE("mpi.h", "struct ompi_communicator_t")
TYPE("mpi.h", "struct ompi_op_t")
TYPE("mpi.h", "struct ompi_request_t")
TYPE("mpi.h", "struct ompi_predefined_op_t")


// -----------------------------------
#ifdef __INTERNAL_FUN_DEFINITION
	#undef __INTERNAL_FUN_DEFINITION
	#undef FUN
#endif

#ifdef __INTERNAL_TYPE_DEFINITION
	#undef __INTERNAL_TYPE_DEFINITION
	#undef TYPE
#endif
// -----------------------------------
