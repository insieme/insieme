/**
 * Copyright (c) 2002-2015 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details
 * regarding third party software licenses.
 */

/**
 * A simple definition file for the IR extensions introduced
 * types and operators of the runtime.
 * 
 * Available constructs:
 * 		TYPE(name, type)		 		 ... introduces a type name with IR type type
 * 		NTYPE(name, type, cname) 		 ... introduces a type name with IR type type and the given C name
 * 		LITERAL(name, value, type)		 ... introduces a literal with the given name, type and value
 */

#ifndef TYPE
#define TYPE(name, type)
#endif
#ifndef NTYPE
#define NTYPE(name, type, cname) TYPE(name, type)
#define __OWN_NTYPE
#endif
#ifndef LITERAL
#define LITERAL(name, value, type)
#endif

// -- Runtime entities ------
TYPE(contextType, 				"irt_context")

TYPE(workItemType, 					"irt_wi")
TYPE(workItemImplType, 				"irt_wi_implementation_id")
TYPE(workItemVariantType, 			"irt_wi_variant")
TYPE(workItemVariantImplType, 		"(ref<irt_wi>)->unit")

LITERAL(workItemVariantCtr, 		"WorkItemVariant", 	"((ref<irt_wi>)->unit)->irt_wi_variant")
LITERAL(workItemImplCtr, 			"WorkItemImpl", 	"(list<irt_wi_variant>)->irt_wi_implementation_id")
LITERAL(unknownEffort, 				"unknownEffort", 	"(int<8>,int<8>)->uint<8>")


/**
 * Used to force the registration of work item implementations within the implementation table.
 * The given work item implementation will not be executed
 */
LITERAL(registerWorkItemImpl, 	"registerImpl",	"(irt_wi_implementation_id)->unit")
LITERAL(joinWorkItem, 			"irt_wi_join", 	"(ref<irt_wi>)->unit")
LITERAL(exitWorkItem, 			"irt_wi_end", 	"(ref<irt_wi>)->unit")

// -- Data Item types and literals ------
TYPE(typeID, 			"irt_type_id")
LITERAL(wrapLWData,   	"wrap",   "('a)->irt_lwdi<'a>")
LITERAL(unwrapLWData, 	"unwrap", "(irt_lwdi<'a>)->'a")


// -- IR interface ---------
TYPE(jobType, 	"irt_parallel_job")

LITERAL(createJob, 	"createJob", 	"(uint<8>,uint<8>,uint<8>,irt_wi_implementation_id,irt_lwdi<'a>)->irt_parallel_job")
LITERAL(parallel, 	"irt_parallel", "(irt_parallel_job)->ref<irt_wi>")
LITERAL(task, 	    "irt_task", "(irt_parallel_job)->ref<irt_wi>")
LITERAL(region, 	"irt_region", "(irt_parallel_job)->ref<irt_wi>")

LITERAL(pfor, 		"irt_pfor", 	"(threadgroup,int<4>,int<4>,int<4>,irt_wi_implementation_id,irt_lwdi<'a>)->ref<irt_wi>")
LITERAL(merge, 		"irt_merge", 	"(ref<irt_wi>)->unit")


/*
 * An attribute marking an expression as being a region. For now,
 * this attribute is only supported when being applied to a pfor-call.
 */
LITERAL(regionAttribute, "region", "(uint<8>)->attribute")


// -- Standalone runtime Handling ------
LITERAL(runStandalone, "runStandalone", "(irt_wi_implementation_id, irt_lwdi<'a>)->unit")

// -- Code Utilities ------
NTYPE(workItemRange, 			"struct { int<4> begin; int<4> end; int<4> step; }", "irt_work_item_range")

LITERAL(getWorkItemRange, 		"getRange", 	"(ref<irt_wi>)->struct { int<4> begin; int<4> end; int<4> step; }")
LITERAL(getWorkItemArgument, 	"getArg", 		"(ref<irt_wi>, uint<#a>, type<irt_lwdi<'p>>, type<'a>)->'a")


#ifdef __OWN_NTYPE
#undef __OWN_NTYPE
#undef NTYPE
#endif
