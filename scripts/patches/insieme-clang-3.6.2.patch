diff -rupN llvm-3.6.2.src/tools/clang/include/clang/Basic/IdentifierTable.h llvm-3.6.2.src.mod/tools/clang/include/clang/Basic/IdentifierTable.h
--- llvm-3.6.2.src/tools/clang/include/clang/Basic/IdentifierTable.h	2014-12-11 13:18:08.000000000 +0100
+++ llvm-3.6.2.src.mod/tools/clang/include/clang/Basic/IdentifierTable.h	2015-08-03 11:35:55.563113469 +0200
@@ -160,7 +160,7 @@ public:
   /// to tok::identifier for libstdc++ 4.2. Keep track of when this happens
   /// using this method so we can inform serialization about it.
   void RevertTokenIDToIdentifier() {
-    assert(TokenID != tok::identifier && "Already at tok::identifier");
+    //assert(TokenID != tok::identifier && "Already at tok::identifier");
     TokenID = tok::identifier;
     RevertedTokenID = true;
   }
diff -rupN llvm-3.6.2.src/tools/clang/include/clang/Parse/Parser.h llvm-3.6.2.src.mod/tools/clang/include/clang/Parse/Parser.h
--- llvm-3.6.2.src/tools/clang/include/clang/Parse/Parser.h	2014-12-16 00:16:32.000000000 +0100
+++ llvm-3.6.2.src.mod/tools/clang/include/clang/Parse/Parser.h	2015-08-03 11:39:57.333310652 +0200
@@ -14,6 +14,10 @@
 #ifndef LLVM_CLANG_PARSE_PARSER_H
 #define LLVM_CLANG_PARSE_PARSER_H
 
+// ----- Insieme compiler ------
+class ParserProxy;
+// -----------------------------
+
 #include "clang/Basic/OpenMPKinds.h"
 #include "clang/Basic/OperatorPrecedence.h"
 #include "clang/Basic/Specifiers.h"
@@ -59,6 +63,10 @@ class Parser : public CodeCompletionHand
   friend class ParenBraceBracketBalancer;
   friend class BalancedDelimiterTracker;
 
+  // ----- Insieme compiler ------
+  friend class ::ParserProxy;
+  // -----------------------------
+
   Preprocessor &PP;
 
   /// Tok - The current token we are peeking ahead.  All parsing methods assume
diff -rupN llvm-3.6.2.src/tools/clang/include/clang/Sema/Sema.h llvm-3.6.2.src.mod/tools/clang/include/clang/Sema/Sema.h
--- llvm-3.6.2.src/tools/clang/include/clang/Sema/Sema.h	2015-03-12 12:14:45.000000000 +0100
+++ llvm-3.6.2.src.mod/tools/clang/include/clang/Sema/Sema.h	2015-08-03 11:45:25.289649740 +0200
@@ -954,7 +954,7 @@ public:
   Sema(Preprocessor &pp, ASTContext &ctxt, ASTConsumer &consumer,
        TranslationUnitKind TUKind = TU_Complete,
        CodeCompleteConsumer *CompletionConsumer = nullptr);
-  ~Sema();
+  virtual ~Sema();
 
   /// \brief Perform initialization that occurs after the parser has been
   /// initialized but before it parses anything.
@@ -1570,7 +1570,7 @@ public:
                bool IsAddressOfOperand,
                std::unique_ptr<CorrectionCandidateCallback> CCC = nullptr);
 
-  Decl *ActOnDeclarator(Scope *S, Declarator &D);
+  virtual Decl *ActOnDeclarator(Scope *S, Declarator &D);
 
   NamedDecl *HandleDeclarator(Scope *S, Declarator &D,
                               MultiTemplateParamsArg TemplateParameterLists);
@@ -1675,8 +1675,8 @@ public:
   void CheckForFunctionRedefinition(FunctionDecl *FD,
                                     const FunctionDecl *EffectiveDefinition =
                                         nullptr);
-  Decl *ActOnStartOfFunctionDef(Scope *S, Declarator &D);
-  Decl *ActOnStartOfFunctionDef(Scope *S, Decl *D);
+  virtual Decl *ActOnStartOfFunctionDef(Scope *S, Declarator &D);
+  virtual Decl *ActOnStartOfFunctionDef(Scope *S, Decl *D);
   void ActOnStartOfObjCMethodDef(Scope *S, Decl *D);
   bool isObjCMethodDecl(Decl *D) {
     return D && isa<ObjCMethodDecl>(D);
@@ -1702,8 +1702,8 @@ public:
   bool canSkipFunctionBody(Decl *D);
 
   void computeNRVO(Stmt *Body, sema::FunctionScopeInfo *Scope);
-  Decl *ActOnFinishFunctionBody(Decl *Decl, Stmt *Body);
-  Decl *ActOnFinishFunctionBody(Decl *Decl, Stmt *Body, bool IsInstantiation);
+  virtual Decl *ActOnFinishFunctionBody(Decl *Decl, Stmt *Body);
+  virtual Decl *ActOnFinishFunctionBody(Decl *Decl, Stmt *Body, bool IsInstantiation);
   Decl *ActOnSkippedFunctionBody(Decl *Decl);
   void ActOnFinishInlineMethodDef(CXXMethodDecl *D);
 
@@ -1826,7 +1826,7 @@ public:
   void ActOnDefs(Scope *S, Decl *TagD, SourceLocation DeclStart,
                  IdentifierInfo *ClassName,
                  SmallVectorImpl<Decl *> &Decls);
-  Decl *ActOnField(Scope *S, Decl *TagD, SourceLocation DeclStart,
+  virtual Decl *ActOnField(Scope *S, Decl *TagD, SourceLocation DeclStart,
                    Declarator &D, Expr *BitfieldWidth);
 
   FieldDecl *HandleField(Scope *S, RecordDecl *TagD, SourceLocation DeclStart,
@@ -1883,7 +1883,7 @@ public:
 
   /// ActOnTagFinishDefinition - Invoked once we have finished parsing
   /// the definition of a tag (enumeration, class, struct, or union).
-  void ActOnTagFinishDefinition(Scope *S, Decl *TagDecl,
+  virtual void ActOnTagFinishDefinition(Scope *S, Decl *TagDecl,
                                 SourceLocation RBraceLoc);
 
   void ActOnObjCContainerFinishDefinition();
@@ -3090,7 +3090,7 @@ public:
 
   void ActOnStartOfCompoundStmt();
   void ActOnFinishOfCompoundStmt();
-  StmtResult ActOnCompoundStmt(SourceLocation L, SourceLocation R,
+  virtual StmtResult ActOnCompoundStmt(SourceLocation L, SourceLocation R,
                                ArrayRef<Stmt *> Elts, bool isStmtExpr);
 
   /// \brief A RAII object to enter scope of a compound statement.
@@ -3120,7 +3120,7 @@ public:
     void disable() { Active = false; }
   };
 
-  StmtResult ActOnDeclStmt(DeclGroupPtrTy Decl,
+  virtual StmtResult ActOnDeclStmt(DeclGroupPtrTy Decl,
                                    SourceLocation StartLoc,
                                    SourceLocation EndLoc);
   void ActOnForEachDeclStmt(DeclGroupPtrTy Decl);
@@ -3140,7 +3140,7 @@ public:
                                  ArrayRef<const Attr*> Attrs,
                                  Stmt *SubStmt);
 
-  StmtResult ActOnIfStmt(SourceLocation IfLoc,
+  virtual StmtResult ActOnIfStmt(SourceLocation IfLoc,
                          FullExprArg CondVal, Decl *CondVar,
                          Stmt *ThenVal,
                          SourceLocation ElseLoc, Stmt *ElseVal);
@@ -3157,7 +3157,7 @@ public:
                                  SourceLocation CondLParen, Expr *Cond,
                                  SourceLocation CondRParen);
 
-  StmtResult ActOnForStmt(SourceLocation ForLoc,
+  virtual StmtResult ActOnForStmt(SourceLocation ForLoc,
                           SourceLocation LParenLoc,
                           Stmt *First, FullExprArg Second,
                           Decl *SecondVar,
diff -rupN llvm-3.6.2.src/tools/clang/lib/Parse/ParsePragma.cpp llvm-3.6.2.src.mod/tools/clang/lib/Parse/ParsePragma.cpp
--- llvm-3.6.2.src/tools/clang/lib/Parse/ParsePragma.cpp	2014-10-22 23:08:43.000000000 +0200
+++ llvm-3.6.2.src.mod/tools/clang/lib/Parse/ParsePragma.cpp	2015-08-05 13:48:20.827385817 +0200
@@ -192,11 +192,11 @@ void Parser::initializePragmaHandlers()
 
     PP.AddPragmaHandler("OPENCL", FPContractHandler.get());
   }
-  if (getLangOpts().OpenMP)
-    OpenMPHandler.reset(new PragmaOpenMPHandler());
-  else
-    OpenMPHandler.reset(new PragmaNoOpenMPHandler());
-  PP.AddPragmaHandler(OpenMPHandler.get());
+  //if (getLangOpts().OpenMP)
+  //  OpenMPHandler.reset(new PragmaOpenMPHandler());
+  //else
+  //  OpenMPHandler.reset(new PragmaNoOpenMPHandler());
+  //PP.AddPragmaHandler(OpenMPHandler.get());
 
   if (getLangOpts().MicrosoftExt) {
     MSCommentHandler.reset(new PragmaCommentHandler(Actions));
@@ -258,8 +258,8 @@ void Parser::resetPragmaHandlers() {
     OpenCLExtensionHandler.reset();
     PP.RemovePragmaHandler("OPENCL", FPContractHandler.get());
   }
-  PP.RemovePragmaHandler(OpenMPHandler.get());
-  OpenMPHandler.reset();
+  //PP.RemovePragmaHandler(OpenMPHandler.get());
+  //OpenMPHandler.reset();
 
   if (getLangOpts().MicrosoftExt) {
     PP.RemovePragmaHandler(MSCommentHandler.get());
