# 1 "/home/alessi/Documents/InsiemeCodes/LTE/insieme-LTE_Uplink_Receiver_PHY_Benchmark/lib/ulRsGen/common/src/feldspar.c"
# 1 "/home/alessi/Documents/InsiemeCodes/LTE/insieme-LTE_Uplink_Receiver_PHY_Benchmark//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/home/alessi/Documents/InsiemeCodes/LTE/insieme-LTE_Uplink_Receiver_PHY_Benchmark/lib/ulRsGen/common/src/feldspar.c"






# 1 "/home/alessi/Documents/InsiemeCodes/LTE/insieme-LTE_Uplink_Receiver_PHY_Benchmark/lib/ulRsGen/common/inc/feldspar.h" 1
# 10 "/home/alessi/Documents/InsiemeCodes/LTE/insieme-LTE_Uplink_Receiver_PHY_Benchmark/lib/ulRsGen/common/inc/feldspar.h"
# 1 "/home/alessi/Documents/InsiemeCodes/LTE/insieme-LTE_Uplink_Receiver_PHY_Benchmark/lib/ulRsGen/common/inc/missingFunc.h" 1
# 10 "/home/alessi/Documents/InsiemeCodes/LTE/insieme-LTE_Uplink_Receiver_PHY_Benchmark/lib/ulRsGen/common/inc/missingFunc.h"
# 1 "/home/alessi/Documents/InsiemeCodes/LTE/insieme-LTE_Uplink_Receiver_PHY_Benchmark/lib/ulRsGen/inc/typedefs.h" 1
# 37 "/home/alessi/Documents/InsiemeCodes/LTE/insieme-LTE_Uplink_Receiver_PHY_Benchmark/lib/ulRsGen/inc/typedefs.h"
typedef unsigned short U16;
typedef unsigned int U32;
typedef short S16;
typedef int S32;
typedef short BOOL;
typedef U16 PID;
typedef U16 LBID;
typedef U16 THREADID;
typedef U16 SEMID;
typedef struct { U32 msw, lsw; } U64;
typedef unsigned short CHAR;
typedef U32 SIGSELECT;
typedef unsigned short U8;
# 11 "/home/alessi/Documents/InsiemeCodes/LTE/insieme-LTE_Uplink_Receiver_PHY_Benchmark/lib/ulRsGen/common/inc/missingFunc.h" 2
# 1 "/home/alessi/Documents/InsiemeCodes/LTE/insieme-LTE_Uplink_Receiver_PHY_Benchmark/lib/ulRsGen/common/inc/feldspar_intel_types.h" 1
# 14 "/home/alessi/Documents/InsiemeCodes/LTE/insieme-LTE_Uplink_Receiver_PHY_Benchmark/lib/ulRsGen/common/inc/feldspar_intel_types.h"
typedef int RealNum;
typedef struct {
  short int re;
  short int im;
} complex;
# 12 "/home/alessi/Documents/InsiemeCodes/LTE/insieme-LTE_Uplink_Receiver_PHY_Benchmark/lib/ulRsGen/common/inc/missingFunc.h" 2






void intToU32(signed int in, U32 *out);
void u32ToInt(unsigned long int in, signed int *out);
void intToReal(signed int in, RealNum *out);
void cos_feldspar(RealNum a, RealNum *b);
void sin_feldspar(RealNum a, RealNum *b);
# 11 "/home/alessi/Documents/InsiemeCodes/LTE/insieme-LTE_Uplink_Receiver_PHY_Benchmark/lib/ulRsGen/common/inc/feldspar.h" 2
# 1 "/home/alessi/Documents/InsiemeCodes/LTE/insieme-LTE_Uplink_Receiver_PHY_Benchmark/lib/ulRsGen/common/inc/feldspar_intel_functions.h" 1
# 14 "/home/alessi/Documents/InsiemeCodes/LTE/insieme-LTE_Uplink_Receiver_PHY_Benchmark/lib/ulRsGen/common/inc/feldspar_intel_functions.h"
void mkComplexReal(RealNum re, RealNum im , complex *c);
void mul_RealNum(RealNum a, RealNum b , RealNum *c);
void div_RealNum(RealNum a, RealNum b , RealNum *c);
void sub_RealNum(RealNum a, RealNum b , RealNum *c);
void mul_ComplexReal(complex a, complex b, complex *c);
void quot(signed int numerator, signed int denominator, signed int *out);
# 12 "/home/alessi/Documents/InsiemeCodes/LTE/insieme-LTE_Uplink_Receiver_PHY_Benchmark/lib/ulRsGen/common/inc/feldspar.h" 2

signed int mod_fun_signed_int( signed int, signed int );
int mod_fun_unsigned_int( unsigned int, unsigned int );
long mod_fun_signed_long( long, long );
long mod_fun_unsigned_long( unsigned long, unsigned long );

int pow_fun_signed_int( int, int );
int pow_fun_unsigned_int( unsigned int, unsigned int );

int bit_fun_signed_int( int );
int setBit_fun_signed_int( int, int );
int clearBit_fun_signed_int( int, int );
int complementBit_fun_signed_int( int, int );
int testBit_fun_signed_int( int, int );
int rotateL_fun_signed_int( int, int );
int rotateR_fun_signed_int( int, int );
int bitSize_fun_signed_int( int );
int isSigned_fun_signed_int( int );

int abs_fun_signed_int( int );
int abs_fun_unsigned_int( unsigned int );
long abs_fun_signed_long( long );
long abs_fun_unsigned_long( unsigned long );

int signum_fun_signed_int( int );
int signum_fun_unsigned_int( unsigned int );
long signum_fun_signed_long( long );
long signum_fun_unsigned_long( unsigned long );

void copy_arrayOf_signed_int( int*, int, int* );
void copy_arrayOf_unsigned_int( unsigned int*, int, unsigned int* );
void copy_arrayOf_signed_long( long*, int, long* );
void copy_arrayOf_unsigned_long( unsigned long*, int, unsigned long* );
# 8 "/home/alessi/Documents/InsiemeCodes/LTE/insieme-LTE_Uplink_Receiver_PHY_Benchmark/lib/ulRsGen/common/src/feldspar.c" 2

signed int mod_fun_signed_int( signed int a, signed int b ) {
  return ((int)a % (int)b);
}

int mod_fun_unsigned_int( unsigned int a, unsigned int b ) {
  return a % b;
}

long mod_fun_signed_long( long a, long b ) {
  if ((a > 0 && b > 0) || (a < 0 && b < 0)) return a % b;
  return (a % b) * (-1);
}

long mod_fun_unsigned_long( unsigned long a, unsigned long b ) {
  return a % b;
}

int pow_fun_signed_int( int a, int b) {
  int out = 1;
  int i;
  for(i=0; i<b; i++) out *= a;
  return out;
}

int pow_fun_unsigned_int( unsigned int a, unsigned int b ) {
  int out = 1;
  unsigned int i;
  for(i=0; i<b; i++) out *= a;
  return out;
}

int bit_fun_signed_int( int i ) {
  return 1 << i;
}

int setBit_fun_signed_int( int x, int i ) {
  return x ^ 1 << i;
}

int clearBit_fun_signed_int( int x, int i ) {
  return x & ~(1 << i);
}

int complementBit_fun_signed_int( int x, int i ) {
  return x | 1 << i;
}

int testBit_fun_signed_int( int x, int i ) {
  return (x & (1 << i)) != 0;
}

int bit_shift_fun_signed_int( int x, int i ) {
  if (i < 0) return x >> -i;
  if (i > 0) return x << i;
  return x;
}

int bit_rotate_fun_signed_int( int x, int i ) {
  if (i < 0 && x < 0) {
    int left = i + sizeof(x) * 8;
    return ((x >> -i) & ~bit_shift_fun_signed_int(-1, left)) ^ bit_shift_fun_signed_int(x, left);
  }
  if (i < 0) return x >> -i ^ bit_shift_fun_signed_int(x, i + sizeof(x) * 8);
  else if (i == 0) return x;
  else return x << i ^ bit_shift_fun_signed_int(x, i - sizeof(x) * 8);
}

int rotateL_fun_signed_int( int x, int i ) {
  return bit_rotate_fun_signed_int(x, i);
}

int rotateR_fun_signed_int( int x, int i ) {
  return bit_rotate_fun_signed_int(x, -i);
}

int bitSize_fun_signed_int( int x ) {
  return sizeof x * 8;
}

int isSigned_fun_signed_int( int x ) {
  (void) x;
  return 1;
}

int abs_fun_signed_int( int a ) {
  if (a < 0) return a*(-1);
  return a;
}

int abs_fun_unsigned_int( unsigned int a ) {
  return a;
}

long abs_fun_signed_long( long a ) {
  if (a < 0) return a*(-1);
  return a;
}

long abs_fun_unsigned_long( unsigned long a ) {
  return a;
}

int signum_fun_signed_int( int a ) {
  if (a < 0) return -1;
  if (a > 0) return 1;
  return 0;
}

int signum_fun_unsigned_int( unsigned int a ) {
  if (a > 0) return 1;
  return 0;
}

long signum_fun_signed_long( long a ) {
  if (a < 0) return -1;
  if (a > 0) return 1;
  return 0;
}

long signum_fun_unsigned_long( unsigned long a ) {
  if (a > 0) return 1;
  return 0;
}

void copy_arrayOf_signed_int( int* a, int a1, int* b) {
  int i;
  for( i=0; i<a1; ++i )
    b[i] = a[i];
}

void copy_arrayOf_unsigned_int( unsigned int* a, int a1, unsigned int* b ) {
  int i;
  for( i=0; i<a1; ++i )
    b[i] = a[i];
}

void copy_arrayOf_signed_long( long* a, int a1, long* b ) {
  int i;
  for( i=0; i<a1; ++i )
    b[i] = a[i];
}

void copy_arrayOf_unsigned_long( unsigned long* a, int a1, unsigned long* b ) {
  int i;
  for( i=0; i<a1; ++i )
    b[i] = a[i];
}
