GCC Toolchain
-------------

Careful when using a custom GCC toolchain which is installed in a /non-system-default/ path (i.e.
installed in THIRD_PARTY_LIBS_HOME). One needs to take care of providing the correct search path for
linktime (-L) and runtime (LD_LIBRARY_PATH or setting rpath).
Relying on the LD_LIBRARY_PATH is fine as long as there is no setuid bit involved (or capabilities)
then one should rely on RPATH to be set, example use case is ut_rt_energy_test or
ut_rt_instrumentation_test.

To set the RPATH and one can use: -DCMAKE_CXX_LINK_FLAGS="-Wl,-rpath,${gcc-tool-chain-root}/lib64"
To set the linktime -L flag on can use: -DCMAKE_CXX_LINK_FLAGS="-L${gcc-tool-chain-root}/lib64"

To provide the correct compilers from the custom toolchain one can set the PATH, CC and CXX
environment variables accordingly.
For example:
PATH=${gcc-tool-chain-root}:$PATH
CC=gcc
CXX=g++

To use ccache provide it as CC/CXX (i.e. CC="ccach gcc").

As the integration tests use a backend compiler (which might be installed at a custom location), one
should take care of the LD_LIBRARY_PATH

TODO:
Currently Insieme offers no CMake/Make install mechanism, whenever this comes up, one needs to take
care of this as well.

Configuring the Insieme build
-----------------------------

Several CMake options to build only parts of insieme:

+ BUILD_RUNTIME_ONLY=ON|OFF - builds only runtime + dependencies

+ BUILD_CLANG=ON|OFF - build Clang frontend + everything else

If non of the above options are provided or if they are set to OFF, EVERYTHING is build.

Careful the order in the CMakeLists.txt (of the add_subdirectory calls) matters!

Various CMake options
-----------------------

- BUILD_DOXYGEN=ON|OFF			: build doxygen (code) documentation

- CONDUCT_MEMORY_CHECKS=ON|OFF	: run the unit tests with valgrind (some are excluded, mostly
  runtime unit tests

- DOCS=ON|OFF					: build insieme developer documentation (not doxygen)

- USE_OPENCL=ON|OFF				: enable opencl

- USE_ENERGY=ON|OFF				: enable energy measurement - papi


Finding Third-Party-Libraries
-----------------------------

We expect an environment variable THIRD_PARTY_LIBS_HOME (preferred) or INSIEME_LIBS_HOME to point to the
directory containing the installed third party libraries.

The CMake script will give an error if a 3rdparty library is missing or not available in the
expected version. The expected version of the currently known/used 3rd-party library can be found in
${insieme_source}/code/cmake/default_library_configuration.cmake.

We use a wrapper for the find_package (insieme_find_package) to give hints for the library lookup.
Careful the find_package mechanisms is case-sensitive!

1 set a cmake or environment variable ${lib_name_upper_case}_ROOT where the 3rdparty library
	${lib_name} is expected  

2 have them installed in THIRD_PARTY_LIBS_HOME, in a directory called ${lib_name}-${lib_VERSION}
where the ${lib_version} is as specified in the defualt_library_configuration.cmake, or
as fallback use a link ${lib_name}-latest to point to the "latest" version of said library - this
gives a WARNING!.

3 if they are not found at neither cmake tries to find a system installed one

4 if non is found we give a FATAL_ERROR -> with hints where to install the library or how to provide
	the hints

Overwriting 3rd-party library version is possible by providing an environment variable
${lib_name}_VERSION. Careful case-sensitive! Check the name in the default library configuration
file.


Using Ninja instead of Make
---------------------------

CMake provides a generator for Ninja an alternative build system to Make. It offers better control
over parallel job execution via job pool. This works with CMake 3.0 but bit shaky... better to use
it with CMake 3.2. 

We have some checks for CMake 3.2 in the cases where we want to setup job pools. 

In case of Ninja usage, use ctest to run the unit tests.


Using ExternalProjects
----------------------
ExternalProjects provide a mechanism to download/compile/install 3rd-party libraries during the
build of the actual project (careful this is not done during the CMake run!).

Again we have checks for CMake version as below (<) CMake 3.2 things are a bit shaky. 


Superbuild
----------

This should replace the nice scripts/Makefile + the install scripts (WORK IN PROGRESS!!!)

${insieme_src_dir}/scripts/CMakeLists.txt contains the script for a "superbuild", to install
third-party libraries in a given target directory (set by env var THIRD_PARTY_LIBS_HOME (preferred)
or INSIEME_LIBS_HOME) if non is given, ~/libs/ is used.

Careful here we try first to find the libraries with insieme_find_package (as described above) and
if not found we create a target to install it. In the next step the user has to run the generated
Makefile with the targets (make all would install all which were not found)
